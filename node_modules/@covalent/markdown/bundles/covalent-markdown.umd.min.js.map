{"version":3,"sources":["ng://@covalent/markdown/markdown.component.ts","ng://@covalent/markdown/markdown.module.ts"],"names":["showdown","require","TdMarkdownComponent","_renderer","_elementRef","_domSanitizer","this","_simpleLineBreaks","onContentReady","EventEmitter","Object","defineProperty","prototype","content","_content","simpleLineBreaks","ngOnChanges","refresh","ngAfterViewInit","_loadContent","textContent","markdown","trim","length","setProperty","nativeElement","_elementFromString","_render","emit","markupStr","div","createElement","appendChild","innerHTML","sanitize","SecurityContext","HTML","lines","replace","split","firstLineWhitespace","match","startingWhitespaceRegex","RegExp","markdownToParse","map","line","join","converter","Converter","setOption","makeHtml","Component","args","selector","template","Renderer2","ElementRef","DomSanitizer","Input","Output","CovalentMarkdownModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"icAKIA,EAAgBC,QAAQ,6BAE5BC,EAAA,WAwCE,SAAAA,EAAoBC,EACAC,EACAC,GAFAC,KAAAH,UAAAA,EACAG,KAAAF,YAAAA,EACAE,KAAAD,cAAAA,EAlCZC,KAAAC,mBAA6B,EA8BbD,KAAAE,eAA0C,IAAIC,EAAAA,aA2ExE,OA/FEC,OAAAC,eACIT,EAAAU,UAAA,UAAO,KADX,SACYC,GACVP,KAAKQ,SAAWD,mCASlBH,OAAAC,eACIT,EAAAU,UAAA,mBAAgB,KADpB,SACqBG,GACnBT,KAAKC,kBAAoBQ,mCAa3Bb,EAAAU,UAAAI,YAAA,WACEV,KAAKW,WAGPf,EAAAU,UAAAM,gBAAA,WACOZ,KAAKQ,UACRR,KAAKa,aAA2Bb,KAAKF,YAAyB,cAAEgB,cAIpElB,EAAAU,UAAAK,QAAA,WACMX,KAAKQ,SACPR,KAAKa,aAAab,KAAKQ,UACdR,KAAKF,cAAgBE,KAAKQ,UACnCR,KAAKa,aAA2Bb,KAAKF,YAAyB,cAAEgB,cAO5DlB,EAAAU,UAAAO,aAAR,SAAqBE,GACnB,GAAIA,GAAqC,EAAzBA,EAASC,OAAOC,OAAY,CAE1CjB,KAAKH,UAAUqB,YAAYlB,KAAKF,YAAYqB,cAAe,YAAa,IAEvCnB,KAAKoB,mBAAmBpB,KAAKqB,QAAQN,IAExEf,KAAKE,eAAeoB,QAGd1B,EAAAU,UAAAc,mBAAR,SAA2BG,OAGnBC,EAAsBxB,KAAKH,UAAU4B,cAAc,OAGzD,OAFAzB,KAAKH,UAAU6B,YAAY1B,KAAKF,YAAYqB,cAAeK,GAC3DA,EAAIG,UAAY3B,KAAKD,cAAc6B,SAASC,EAAAA,gBAAgBC,KAAMP,GAC3DC,GAGD5B,EAAAU,UAAAe,QAAR,SAAgBN,OAKVgB,GAHJhB,EAAWA,EAASiB,QAAQ,gBAAiB,IACzBA,QAAQ,wBAAyB,KAEtBC,MAAM,MAGjCC,EAA8BH,EAAM,GAAGI,MAAM,aAAa,GAG1DC,EAAkC,IAAIC,OAAO,IAAMH,GAMnDI,GALJP,EAAQA,EAAMQ,IAAI,SAASC,GACzB,OAAOA,EAAKR,QAAQI,EAAyB,OAIVK,KAAK,MAGtCC,EAAiB,IAAIhD,EAASiD,UAMlC,OALAD,EAAUE,UAAU,gBAAgB,GACpCF,EAAUE,UAAU,aAAa,GACjCF,EAAUE,UAAU,UAAU,GAC9BF,EAAUE,UAAU,mBAAoB5C,KAAKC,mBAC1ByC,EAAUG,SAASP,wBA7GzCQ,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,cAEVC,SAAA,0nPAV0EC,EAAAA,iBAAzCC,EAAAA,kBAC1BC,EAAAA,iDAwBNC,EAAAA,MAAKN,KAAA,CAAC,qCAWNM,EAAAA,MAAKN,KAAA,CAAC,4CASNO,EAAAA,OAAMP,KAAA,CAAC,mBA2EVnD,EAjHA,GCPA2D,EAAA,WAKA,SAAAA,KAaA,2BAbCC,EAAAA,SAAQT,KAAA,CAAC,CACRU,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ/D,GAEFgE,QAAS,CACPhE,OAKJ2D,EAlBA","sourcesContent":["import { Component, AfterViewInit, ElementRef, Input, Output, EventEmitter, Renderer2, SecurityContext, OnChanges } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet showdown: any = require('showdown/dist/showdown.js');\n\n@Component({\n  selector: 'td-markdown',\n  styleUrls: ['./markdown.component.scss'],\n  templateUrl: './markdown.component.html',\n})\nexport class TdMarkdownComponent implements OnChanges, AfterViewInit {\n\n  private _content: string;\n  private _simpleLineBreaks: boolean = false;\n\n  /**\n   * content?: string\n   *\n   * Markdown format content to be parsed as html markup.\n   * Used to load data dynamically.\n   *\n   * e.g. README.md content.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n  }\n\n  /**\n   * simpleLineBreaks?: string\n   *\n   * Sets whether newline characters inside paragraphs and spans are parsed as <br/>.\n   * Defaults to false.\n   */\n  @Input('simpleLineBreaks')\n  set simpleLineBreaks(simpleLineBreaks: boolean) {\n    this._simpleLineBreaks = simpleLineBreaks;\n  }\n\n  /**\n   * contentReady?: function\n   * Event emitted after the markdown content rendering is finished.\n   */\n  @Output('contentReady') onContentReady: EventEmitter<undefined> = new EventEmitter<undefined>();\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer) {}\n\n  ngOnChanges(): void {\n    this.refresh();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    }\n  }\n\n  refresh(): void {\n    if (this._content) {\n      this._loadContent(this._content);\n    } else if (this._elementRef && !this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    }\n  }\n\n  /**\n   * General method to parse a string markdown into HTML Elements and load them into the container\n   */\n  private _loadContent(markdown: string): void {\n    if (markdown && markdown.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      let divElement: HTMLDivElement = this._elementFromString(this._render(markdown));\n    }\n    this.onContentReady.emit();\n  }\n\n  private _elementFromString(markupStr: string): HTMLDivElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const div: HTMLDivElement = this._renderer.createElement('div');\n    this._renderer.appendChild(this._elementRef.nativeElement, div);\n    div.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, markupStr);\n    return div;\n  }\n\n  private _render(markdown: string): string {\n    // Trim leading and trailing newlines\n    markdown = markdown.replace(/^(\\s|\\t)*\\n+/g, '')\n                       .replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markdown by line characters\n    let lines: string[] = markdown.split('\\n');\n\n    // check how much indentation is used by the first actual markdown line\n    let firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so markdown can be parsed correctly\n    let startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function(line: string): string {\n      return line.replace(startingWhitespaceRegex, '');\n    });\n\n    // Join lines again with line characters\n    let markdownToParse: string =  lines.join('\\n');\n\n    // Convert markdown into html\n    let converter: any = new showdown.Converter();\n    converter.setOption('ghCodeBlocks', true);\n    converter.setOption('tasklists', true);\n    converter.setOption('tables', true);\n    converter.setOption('simpleLineBreaks', this._simpleLineBreaks);\n    let html: string = converter.makeHtml(markdownToParse);\n    return html;\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdMarkdownComponent } from './markdown.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TdMarkdownComponent,\n  ],\n  exports: [\n    TdMarkdownComponent,\n  ],\n})\nexport class CovalentMarkdownModule {\n\n}\n"]}