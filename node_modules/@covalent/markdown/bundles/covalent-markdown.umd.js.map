{"version":3,"file":"covalent-markdown.umd.js.map","sources":["ng://@covalent/markdown/markdown.component.ts","ng://@covalent/markdown/markdown.module.ts"],"sourcesContent":["import { Component, AfterViewInit, ElementRef, Input, Output, EventEmitter, Renderer2, SecurityContext, OnChanges } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet showdown: any = require('showdown/dist/showdown.js');\n\n@Component({\n  selector: 'td-markdown',\n  styleUrls: ['./markdown.component.scss'],\n  templateUrl: './markdown.component.html',\n})\nexport class TdMarkdownComponent implements OnChanges, AfterViewInit {\n\n  private _content: string;\n  private _simpleLineBreaks: boolean = false;\n\n  /**\n   * content?: string\n   *\n   * Markdown format content to be parsed as html markup.\n   * Used to load data dynamically.\n   *\n   * e.g. README.md content.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n  }\n\n  /**\n   * simpleLineBreaks?: string\n   *\n   * Sets whether newline characters inside paragraphs and spans are parsed as <br/>.\n   * Defaults to false.\n   */\n  @Input('simpleLineBreaks')\n  set simpleLineBreaks(simpleLineBreaks: boolean) {\n    this._simpleLineBreaks = simpleLineBreaks;\n  }\n\n  /**\n   * contentReady?: function\n   * Event emitted after the markdown content rendering is finished.\n   */\n  @Output('contentReady') onContentReady: EventEmitter<undefined> = new EventEmitter<undefined>();\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer) {}\n\n  ngOnChanges(): void {\n    this.refresh();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    }\n  }\n\n  refresh(): void {\n    if (this._content) {\n      this._loadContent(this._content);\n    } else if (this._elementRef && !this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    }\n  }\n\n  /**\n   * General method to parse a string markdown into HTML Elements and load them into the container\n   */\n  private _loadContent(markdown: string): void {\n    if (markdown && markdown.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      let divElement: HTMLDivElement = this._elementFromString(this._render(markdown));\n    }\n    this.onContentReady.emit();\n  }\n\n  private _elementFromString(markupStr: string): HTMLDivElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const div: HTMLDivElement = this._renderer.createElement('div');\n    this._renderer.appendChild(this._elementRef.nativeElement, div);\n    div.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, markupStr);\n    return div;\n  }\n\n  private _render(markdown: string): string {\n    // Trim leading and trailing newlines\n    markdown = markdown.replace(/^(\\s|\\t)*\\n+/g, '')\n                       .replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markdown by line characters\n    let lines: string[] = markdown.split('\\n');\n\n    // check how much indentation is used by the first actual markdown line\n    let firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so markdown can be parsed correctly\n    let startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function(line: string): string {\n      return line.replace(startingWhitespaceRegex, '');\n    });\n\n    // Join lines again with line characters\n    let markdownToParse: string =  lines.join('\\n');\n\n    // Convert markdown into html\n    let converter: any = new showdown.Converter();\n    converter.setOption('ghCodeBlocks', true);\n    converter.setOption('tasklists', true);\n    converter.setOption('tables', true);\n    converter.setOption('simpleLineBreaks', this._simpleLineBreaks);\n    let html: string = converter.makeHtml(markdownToParse);\n    return html;\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdMarkdownComponent } from './markdown.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TdMarkdownComponent,\n  ],\n  exports: [\n    TdMarkdownComponent,\n  ],\n})\nexport class CovalentMarkdownModule {\n\n}\n"],"names":["EventEmitter","SecurityContext","Component","Renderer2","ElementRef","DomSanitizer","Input","Output","NgModule","CommonModule"],"mappings":"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"}
