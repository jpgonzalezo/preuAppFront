{"version":3,"file":"covalent-highlight.umd.js.map","sources":["ng://@covalent/highlight/highlight.component.ts","ng://@covalent/highlight/highlight.module.ts"],"sourcesContent":["import { Component, AfterViewInit, ElementRef, Input, Output, EventEmitter, Renderer2, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet hljs: any = require('highlight.js/lib');\n\n@Component({\n  selector: 'td-highlight',\n  styleUrls: ['./highlight.component.scss'],\n  templateUrl: './highlight.component.html',\n})\nexport class TdHighlightComponent implements AfterViewInit {\n\n  private _initialized: boolean = false;\n\n  private _content: string;\n\n  /**\n   * content?: string\n   *\n   * Code content to be parsed as highlighted html.\n   * Used to load data dynamically.\n   *\n   * e.g. `.html`, `.ts` , etc.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n    if (this._initialized) {\n      this._loadContent(this._content);\n    }\n  }\n\n  /**\n   * lang?: string\n   *\n   * Language of the code content to be parsed as highlighted html.\n   * Defaults to `typescript`\n   *\n   * e.g. `typescript`, `html` , etc.\n   */\n  @Input('lang') language: string = 'typescript';\n\n  /**\n   * contentReady?: function\n   * Event emitted after the highlight content rendering is finished.\n   */\n  @Output('contentReady') onContentReady: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer) {}\n\n  ngAfterViewInit(): void {\n    if (!this.language) {\n      throw new Error('Error: language attribute must be defined in TdHighlightComponent.');\n    }\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    } else {\n      this._loadContent(this._content);\n    }\n    this._initialized = true;\n  }\n  /**\n   * General method to parse a string of code into HTML Elements and load them into the container\n   */\n  private _loadContent(code: string): void {\n    if (code && code.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      let preElement: HTMLPreElement = this._elementFromString(this._render(code));\n    }\n    this.onContentReady.emit();\n  }\n\n  private _elementFromString(codeStr: string): HTMLPreElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const preElement: HTMLPreElement = this._renderer.createElement('pre');\n    this._renderer.appendChild(this._elementRef.nativeElement, preElement);\n    const codeElement: HTMLElement = this._renderer.createElement('code');\n    this._renderer.appendChild(preElement, codeElement);\n    // Set .highlight class into <code> element\n    this._renderer.addClass(codeElement, 'highlight');\n    codeElement.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, codeStr);\n    return preElement;\n  }\n\n  private _render(contents: string): string {\n    // Trim leading and trailing newlines\n    contents = contents.replace(/^(\\s|\\t)*\\n+/g, '')\n                       .replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markup by line characters\n    let lines: string[] = contents.split('\\n');\n\n    // check how much indentation is used by the first actual code line\n    let firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so code can be parsed correctly\n    let startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function(line: string): string {\n      return line\n        .replace('=\"\"', '') // remove empty values\n        .replace(startingWhitespaceRegex, '')\n        .replace(/\\s+$/, ''); // remove trailing white spaces\n    });\n\n    let codeToParse: string =  lines.join('\\n')\n    .replace(/\\{ \\{/gi, '{{').replace(/\\} \\}/gi, '}}')\n    .replace(/&lt;/gi, '<').replace(/&gt;/gi, '>');  // replace with < and > to render HTML in Angular\n\n    // Parse code with highlight.js depending on language\n    let highlightedCode: any = hljs.highlight(this.language, codeToParse, true);\n    highlightedCode.value = highlightedCode.value\n      .replace(/=<span class=\"hljs-value\">\"\"<\\/span>/gi, '')\n      .replace('<head>', '')\n      .replace('<head/>', '');\n    return highlightedCode.value;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdHighlightComponent } from './highlight.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TdHighlightComponent,\n  ],\n  exports: [\n    TdHighlightComponent,\n  ],\n})\nexport class CovalentHighlightModule {\n\n}\n"],"names":["EventEmitter","SecurityContext","Component","Renderer2","ElementRef","DomSanitizer","Input","Output","NgModule","CommonModule"],"mappings":"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"}
