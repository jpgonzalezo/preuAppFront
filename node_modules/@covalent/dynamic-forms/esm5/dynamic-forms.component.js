/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, ContentChildren, QueryList } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { TdDynamicFormsService } from './services/dynamic-forms.service';
import { TdDynamicFormsErrorTemplate } from './dynamic-element.component';
import { timer, Subject } from 'rxjs';
import { takeUntil, filter } from 'rxjs/operators';
var TdDynamicFormsComponent = /** @class */ (function () {
    function TdDynamicFormsComponent(_formBuilder, _dynamicFormsService, _changeDetectorRef) {
        this._formBuilder = _formBuilder;
        this._dynamicFormsService = _dynamicFormsService;
        this._changeDetectorRef = _changeDetectorRef;
        this._renderedElements = [];
        this._templateMap = new Map();
        this._destroy$ = new Subject();
        this._destroyControl$ = new Subject();
        this.dynamicForm = this._formBuilder.group({});
    }
    Object.defineProperty(TdDynamicFormsComponent.prototype, "elements", {
        get: /**
         * @return {?}
         */
        function () {
            return this._renderedElements;
        },
        /**
         * elements: ITdDynamicElementConfig[]
         * JS Object that will render the elements depending on its config.
         * [name] property is required.
         */
        set: /**
         * elements: ITdDynamicElementConfig[]
         * JS Object that will render the elements depending on its config.
         * [name] property is required.
         * @param {?} elements
         * @return {?}
         */
        function (elements) {
            if (elements) {
                this._elements = elements;
            }
            else {
                this._elements = [];
            }
            this._rerenderElements();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDynamicFormsComponent.prototype, "form", {
        /**
         * Getter property for dynamic [FormGroup].
         */
        get: /**
         * Getter property for dynamic [FormGroup].
         * @return {?}
         */
        function () {
            return this.dynamicForm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDynamicFormsComponent.prototype, "valid", {
        /**
         * Getter property for [valid] of dynamic [FormGroup].
         */
        get: /**
         * Getter property for [valid] of dynamic [FormGroup].
         * @return {?}
         */
        function () {
            if (this.dynamicForm) {
                return this.dynamicForm.valid;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDynamicFormsComponent.prototype, "value", {
        /**
         * Getter property for [value] of dynamic [FormGroup].
         */
        get: /**
         * Getter property for [value] of dynamic [FormGroup].
         * @return {?}
         */
        function () {
            if (this.dynamicForm) {
                return this.dynamicForm.value;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDynamicFormsComponent.prototype, "errors", {
        /**
         * Getter property for [errors] of dynamic [FormGroup].
         */
        get: /**
         * Getter property for [errors] of dynamic [FormGroup].
         * @return {?}
         */
        function () {
            if (this.dynamicForm) {
                /** @type {?} */
                var errors = {};
                for (var name_1 in this.dynamicForm.controls) {
                    errors[name_1] = this.dynamicForm.controls[name_1].errors;
                }
                return errors;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdDynamicFormsComponent.prototype, "controls", {
        /**
         * Getter property for [controls] of dynamic [FormGroup].
         */
        get: /**
         * Getter property for [controls] of dynamic [FormGroup].
         * @return {?}
         */
        function () {
            if (this.dynamicForm) {
                return this.dynamicForm.controls;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TdDynamicFormsComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._updateErrorTemplates();
    };
    /**
     * @return {?}
     */
    TdDynamicFormsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy$.next();
        this._destroy$.complete();
        this._destroyControl$.complete();
    };
    /**
     * Refreshes the form and rerenders all validator/element modifications.
     */
    /**
     * Refreshes the form and rerenders all validator/element modifications.
     * @return {?}
     */
    TdDynamicFormsComponent.prototype.refresh = /**
     * Refreshes the form and rerenders all validator/element modifications.
     * @return {?}
     */
    function () {
        this._rerenderElements();
        this._updateErrorTemplates();
    };
    /**
     * Getter method for error template references
     */
    /**
     * Getter method for error template references
     * @param {?} name
     * @return {?}
     */
    TdDynamicFormsComponent.prototype.getErrorTemplateRef = /**
     * Getter method for error template references
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this._templateMap.get(name);
    };
    /**
     * Loads error templates and sets them in a map for faster access.
     */
    /**
     * Loads error templates and sets them in a map for faster access.
     * @return {?}
     */
    TdDynamicFormsComponent.prototype._updateErrorTemplates = /**
     * Loads error templates and sets them in a map for faster access.
     * @return {?}
     */
    function () {
        this._templateMap = new Map();
        for (var i = 0; i < this._errorTemplates.toArray().length; i++) {
            this._templateMap.set(this._errorTemplates.toArray()[i].tdDynamicFormsError, this._errorTemplates.toArray()[i].templateRef);
        }
    };
    /**
     * @return {?}
     */
    TdDynamicFormsComponent.prototype._rerenderElements = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._clearRemovedElements();
        this._renderedElements = [];
        /** @type {?} */
        var duplicates = [];
        this._elements.forEach(function (elem) {
            _this._dynamicFormsService.validateDynamicElementName(elem.name);
            if (duplicates.indexOf(elem.name) > -1) {
                throw new Error("Dynamic element name: \"" + elem.name + "\" is duplicated");
            }
            duplicates.push(elem.name);
            /** @type {?} */
            var dynamicElement = _this.dynamicForm.get(elem.name);
            if (!dynamicElement) {
                _this.dynamicForm.addControl(elem.name, _this._dynamicFormsService.createFormControl(elem));
                _this._subscribeToControlStatusChanges(elem.name);
            }
            else {
                dynamicElement.setValue(elem.default);
                dynamicElement.markAsPristine();
                dynamicElement.markAsUntouched();
                if (elem.disabled) {
                    dynamicElement.disable();
                }
                else {
                    dynamicElement.enable();
                }
                dynamicElement.setValidators(_this._dynamicFormsService.createValidators(elem));
            }
            // copy objects so they are only changes when calling this method
            _this._renderedElements.push(Object.assign({}, elem));
        });
        // call a change detection since the whole form might change
        this._changeDetectorRef.detectChanges();
        timer().toPromise().then(function () {
            // call a markForCheck so elements are rendered correctly in OnPush
            _this._changeDetectorRef.markForCheck();
        });
    };
    /**
     * @return {?}
     */
    TdDynamicFormsComponent.prototype._clearRemovedElements = /**
     * @return {?}
     */
    function () {
        var _this = this;
        for (var i = 0; i < this._renderedElements.length; i++) {
            for (var j = 0; j < this._elements.length; j++) {
                // check if the name of the element is still there removed
                if (this._renderedElements[i].name === this._elements[j].name) {
                    delete this._renderedElements[i];
                    break;
                }
            }
        }
        // remove elements that were removed from the array
        this._renderedElements.forEach(function (elem) {
            _this._destroyControl$.next(elem.name);
            _this.dynamicForm.removeControl(elem.name);
        });
    };
    // Updates component when manually adding errors to controls
    // Updates component when manually adding errors to controls
    /**
     * @param {?} elementName
     * @return {?}
     */
    TdDynamicFormsComponent.prototype._subscribeToControlStatusChanges = 
    // Updates component when manually adding errors to controls
    /**
     * @param {?} elementName
     * @return {?}
     */
    function (elementName) {
        var _this = this;
        /** @type {?} */
        var control = this.controls[elementName];
        /** @type {?} */
        var controlDestroyed$ = this._destroyControl$
            .pipe(filter(function (destroyedElementName) { return destroyedElementName === elementName; }));
        control.statusChanges
            .pipe(takeUntil(this._destroy$), takeUntil(controlDestroyed$)).subscribe(function () {
            _this._changeDetectorRef.markForCheck();
        });
    };
    TdDynamicFormsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'td-dynamic-forms',
                    template: "<form [formGroup]=\"dynamicForm\" novalidate>\n  <div class=\"td-dynamic-form-wrapper\">\n    <ng-template let-element ngFor [ngForOf]=\"elements\">\n      <div class=\"td-dynamic-element-wrapper\"\n          [style.max-width.%]=\"element.flex ? element.flex : 100\"\n          [style.flex]=\"'1 1 ' + (element.flex ? element.flex : 100) + '%'\"\n          [style.-ms-flex]=\"'1 1 ' + (element.flex ? element.flex : 100) + '%'\"\n          [style.-webkit-box-flex]=\"1\">\n        <td-dynamic-element\n          #dynamicElement\n          *ngIf=\"dynamicForm.controls[element.name]\"\n          [formControlName]=\"element.name\"\n          [dynamicControl]=\"dynamicForm.controls[element.name]\"\n          [id]=\"element.name\"\n          [name]=\"element.name\"\n          [label]=\"element.label || element.name\"\n          [hint]=\"element.hint\"\n          [type]=\"element.type\"\n          [required]=\"element.required\"\n          [min]=\"element.min\"\n          [max]=\"element.max\"\n          [minLength]=\"element.minLength\"\n          [maxLength]=\"element.maxLength\"\n          [selections]=\"element.selections\"\n          [multiple]=\"element.multiple\"\n          [errorMessageTemplate]=\"getErrorTemplateRef(element.name)\">\n        </td-dynamic-element>\n      </div>\n    </ng-template>\n  </div>\n  <ng-content></ng-content>\n</form>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".td-dynamic-form-wrapper{-ms-flex-wrap:wrap;flex-wrap:wrap;box-sizing:border-box;display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;max-width:100%;-ms-flex-pack:start;justify-content:start}.td-dynamic-form-wrapper ::ng-deep .mat-form-field-infix{width:auto}.td-dynamic-form-wrapper ::ng-deep .td-dynamic-element-hint{font-size:75%;display:block}.td-dynamic-form-wrapper .td-dynamic-element-wrapper{max-height:100%;box-sizing:border-box;position:relative;padding:4px 4px 8px}"]
                }] }
    ];
    /** @nocollapse */
    TdDynamicFormsComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: TdDynamicFormsService },
        { type: ChangeDetectorRef }
    ]; };
    TdDynamicFormsComponent.propDecorators = {
        _errorTemplates: [{ type: ContentChildren, args: [TdDynamicFormsErrorTemplate,] }],
        elements: [{ type: Input, args: ['elements',] }]
    };
    return TdDynamicFormsComponent;
}());
export { TdDynamicFormsComponent };
if (false) {
    /** @type {?} */
    TdDynamicFormsComponent.prototype._renderedElements;
    /** @type {?} */
    TdDynamicFormsComponent.prototype._elements;
    /** @type {?} */
    TdDynamicFormsComponent.prototype._templateMap;
    /** @type {?} */
    TdDynamicFormsComponent.prototype._destroy$;
    /** @type {?} */
    TdDynamicFormsComponent.prototype._destroyControl$;
    /** @type {?} */
    TdDynamicFormsComponent.prototype._errorTemplates;
    /** @type {?} */
    TdDynamicFormsComponent.prototype.dynamicForm;
    /** @type {?} */
    TdDynamicFormsComponent.prototype._formBuilder;
    /** @type {?} */
    TdDynamicFormsComponent.prototype._dynamicFormsService;
    /** @type {?} */
    TdDynamicFormsComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,