/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable, SkipSelf, Optional } from '@angular/core';
import { Validators, FormControl } from '@angular/forms';
import { TdDynamicInputComponent } from '../dynamic-elements/dynamic-input/dynamic-input.component';
import { TdDynamicFileInputComponent } from '../dynamic-elements/dynamic-file-input/dynamic-file-input.component';
import { TdDynamicTextareaComponent } from '../dynamic-elements/dynamic-textarea/dynamic-textarea.component';
import { TdDynamicSlideToggleComponent } from '../dynamic-elements/dynamic-slide-toggle/dynamic-slide-toggle.component';
import { TdDynamicCheckboxComponent } from '../dynamic-elements/dynamic-checkbox/dynamic-checkbox.component';
import { TdDynamicSliderComponent } from '../dynamic-elements/dynamic-slider/dynamic-slider.component';
import { TdDynamicSelectComponent } from '../dynamic-elements/dynamic-select/dynamic-select.component';
import { TdDynamicDatepickerComponent } from '../dynamic-elements/dynamic-datepicker/dynamic-datepicker.component';
/** @enum {string} */
var TdDynamicType = {
    Text: 'text',
    Boolean: 'boolean',
    Number: 'number',
    Array: 'array',
    Date: 'date',
};
export { TdDynamicType };
/** @enum {string} */
var TdDynamicElement = {
    Input: 'input',
    Datepicker: 'datepicker',
    Password: 'password',
    Textarea: 'textarea',
    Slider: 'slider',
    SlideToggle: 'slide-toggle',
    Checkbox: 'checkbox',
    Select: 'select',
    FileInput: 'file-input',
};
export { TdDynamicElement };
/**
 * @record
 */
export function ITdDynamicElementValidator() { }
if (false) {
    /** @type {?} */
    ITdDynamicElementValidator.prototype.validator;
}
/**
 * @record
 */
export function ITdDynamicElementConfig() { }
if (false) {
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.label;
    /** @type {?} */
    ITdDynamicElementConfig.prototype.name;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.hint;
    /** @type {?} */
    ITdDynamicElementConfig.prototype.type;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.required;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.disabled;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.min;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.max;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.minLength;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.maxLength;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.selections;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.multiple;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.default;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.flex;
    /** @type {?|undefined} */
    ITdDynamicElementConfig.prototype.validators;
}
/** @type {?} */
export var DYNAMIC_ELEMENT_NAME_REGEX = /^[^0-9][^\@]*$/;
var TdDynamicFormsService = /** @class */ (function () {
    function TdDynamicFormsService() {
    }
    /**
     * Method to validate if the [name] is a proper element name.
     * Throws error if name is not valid.
     */
    /**
     * Method to validate if the [name] is a proper element name.
     * Throws error if name is not valid.
     * @param {?} name
     * @return {?}
     */
    TdDynamicFormsService.prototype.validateDynamicElementName = /**
     * Method to validate if the [name] is a proper element name.
     * Throws error if name is not valid.
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (!DYNAMIC_ELEMENT_NAME_REGEX.test(name)) {
            throw new Error('Dynamic element name: "${name}" is not valid.');
        }
    };
    /**
     * Gets component to be rendered depending on [TdDynamicElement | TdDynamicType]
     * Throws error if it does not exists or not supported.
     */
    /**
     * Gets component to be rendered depending on [TdDynamicElement | TdDynamicType]
     * Throws error if it does not exists or not supported.
     * @param {?} element
     * @return {?}
     */
    TdDynamicFormsService.prototype.getDynamicElement = /**
     * Gets component to be rendered depending on [TdDynamicElement | TdDynamicType]
     * Throws error if it does not exists or not supported.
     * @param {?} element
     * @return {?}
     */
    function (element) {
        switch (element) {
            case TdDynamicType.Text:
            case TdDynamicType.Number:
            case TdDynamicElement.Input:
            case TdDynamicElement.Password:
                return TdDynamicInputComponent;
            case TdDynamicElement.Textarea:
                return TdDynamicTextareaComponent;
            case TdDynamicType.Boolean:
            case TdDynamicElement.SlideToggle:
                return TdDynamicSlideToggleComponent;
            case TdDynamicElement.Checkbox:
                return TdDynamicCheckboxComponent;
            case TdDynamicElement.Slider:
                return TdDynamicSliderComponent;
            case TdDynamicType.Array:
            case TdDynamicElement.Select:
                return TdDynamicSelectComponent;
            case TdDynamicElement.FileInput:
                return TdDynamicFileInputComponent;
            case TdDynamicElement.Datepicker:
            case TdDynamicType.Date:
                return TdDynamicDatepickerComponent;
            default:
                throw new Error("Error: type " + element + " does not exist or not supported.");
        }
    };
    /**
     * Creates form control for element depending [ITdDynamicElementConfig] properties.
     */
    /**
     * Creates form control for element depending [ITdDynamicElementConfig] properties.
     * @param {?} config
     * @return {?}
     */
    TdDynamicFormsService.prototype.createFormControl = /**
     * Creates form control for element depending [ITdDynamicElementConfig] properties.
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var validator = this.createValidators(config);
        return new FormControl({ value: config.default, disabled: config.disabled }, validator);
    };
    /**
     * Creates form validationdepending [ITdDynamicElementConfig] properties.
     */
    /**
     * Creates form validationdepending [ITdDynamicElementConfig] properties.
     * @param {?} config
     * @return {?}
     */
    TdDynamicFormsService.prototype.createValidators = /**
     * Creates form validationdepending [ITdDynamicElementConfig] properties.
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var validator;
        if (config.required) {
            validator = Validators.required;
        }
        if (config.max || config.max === 0) {
            validator = Validators.compose([validator, Validators.max(parseFloat(config.max))]);
        }
        if (config.min || config.min === 0) {
            validator = Validators.compose([validator, Validators.min(parseFloat(config.min))]);
        }
        if (config.maxLength || config.maxLength === 0) {
            validator = Validators.compose([validator, Validators.maxLength(parseFloat(config.maxLength))]);
        }
        if (config.minLength || config.minLength === 0) {
            validator = Validators.compose([validator, Validators.minLength(parseFloat(config.minLength))]);
        }
        // Add provided custom validators to the validator function
        if (config.validators) {
            config.validators.forEach(function (validatorConfig) {
                validator = Validators.compose([validator, validatorConfig.validator]);
            });
        }
        return validator;
    };
    TdDynamicFormsService.decorators = [
        { type: Injectable }
    ];
    return TdDynamicFormsService;
}());
export { TdDynamicFormsService };
/**
 * @param {?} parent
 * @return {?}
 */
export function DYNAMIC_FORMS_PROVIDER_FACTORY(parent) {
    return parent || new TdDynamicFormsService();
}
/** @type {?} */
export var DYNAMIC_FORMS_PROVIDER = {
    // If there is already a service available, use that. Otherwise, provide a new one.
    provide: TdDynamicFormsService,
    deps: [[new Optional(), new SkipSelf(), TdDynamicFormsService]],
    useFactory: DYNAMIC_FORMS_PROVIDER_FACTORY,
};
//# sourceMappingURL=data:application/json;base64,