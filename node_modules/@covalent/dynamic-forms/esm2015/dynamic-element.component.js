/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Directive, Input, HostBinding, TemplateRef, ChangeDetectorRef, Type } from '@angular/core';
import { ViewChild, ViewContainerRef } from '@angular/core';
import { ComponentFactoryResolver, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';
import { TemplatePortalDirective } from '@angular/cdk/portal';
import { mixinControlValueAccessor } from '@covalent/core/common';
import { TdDynamicFormsService } from './services/dynamic-forms.service';
export class TdDynamicElementBase {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
    }
}
if (false) {
    /** @type {?} */
    TdDynamicElementBase.prototype._changeDetectorRef;
}
/* tslint:disable-next-line */
/** @type {?} */
export const _TdDynamicElementMixinBase = mixinControlValueAccessor(TdDynamicElementBase);
export class TdDynamicFormsErrorTemplate extends TemplatePortalDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainerRef
     */
    constructor(templateRef, viewContainerRef) {
        super(templateRef, viewContainerRef);
    }
}
TdDynamicFormsErrorTemplate.decorators = [
    { type: Directive, args: [{ selector: '[tdDynamicFormsError]ng-template' },] }
];
/** @nocollapse */
TdDynamicFormsErrorTemplate.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
TdDynamicFormsErrorTemplate.propDecorators = {
    tdDynamicFormsError: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TdDynamicFormsErrorTemplate.prototype.tdDynamicFormsError;
}
export class TdDynamicElementDirective {
    /**
     * @param {?} viewContainer
     */
    constructor(viewContainer) {
        this.viewContainer = viewContainer;
    }
}
TdDynamicElementDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tdDynamicContainer]',
            },] }
];
/** @nocollapse */
TdDynamicElementDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
if (false) {
    /** @type {?} */
    TdDynamicElementDirective.prototype.viewContainer;
}
export class TdDynamicElementComponent extends _TdDynamicElementMixinBase {
    /**
     * @param {?} _componentFactoryResolver
     * @param {?} _dynamicFormsService
     * @param {?} _changeDetectorRef
     */
    constructor(_componentFactoryResolver, _dynamicFormsService, _changeDetectorRef) {
        super(_changeDetectorRef);
        this._componentFactoryResolver = _componentFactoryResolver;
        this._dynamicFormsService = _dynamicFormsService;
        /**
         * Sets label to be displayed.
         */
        this.label = '';
        /**
         * Sets hint to be displayed.
         */
        this.hint = '';
        /**
         * Sets name to be displayed as attribute.
         */
        this.name = '';
        /**
         * Sets type or element of element to be rendered.
         * Throws error if does not exist or no supported.
         */
        this.type = undefined;
        /**
         * Sets required validation checkup (if supported by element).
         */
        this.required = undefined;
        /**
         * Sets min validation checkup (if supported by element).
         */
        this.min = undefined;
        /**
         * Sets max validation checkup (if supported by element).
         */
        this.max = undefined;
        /**
         * Sets minLength validation checkup (if supported by element).
         */
        this.minLength = undefined;
        /**
         * Sets maxLength validation checkup (if supported by element).
         */
        this.maxLength = undefined;
        /**
         * Sets selections for array elements (if supported by element).
         */
        this.selections = undefined;
        /**
         * Sets multiple property for array elements (if supported by element).
         */
        this.multiple = undefined;
        /**
         * Sets error message template so it can be injected into dynamic components.
         */
        this.errorMessageTemplate = undefined;
    }
    /**
     * @return {?}
     */
    get maxAttr() {
        return this.max;
    }
    /**
     * @return {?}
     */
    get minAttr() {
        return this.min;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let component = (/** @type {?} */ (this.type)) instanceof Type ? this.type : this._dynamicFormsService.getDynamicElement(this.type);
        /** @type {?} */
        let ref = this._componentFactoryResolver.
            resolveComponentFactory(component)
            .create(this.childElement.viewContainer.injector);
        this.childElement.viewContainer.insert(ref.hostView);
        this._instance = ref.instance;
        this._instance.control = this.dynamicControl;
        this._instance.label = this.label;
        this._instance.hint = this.hint;
        this._instance.name = this.name;
        this._instance.type = this.type;
        this._instance.value = this.value;
        this._instance.required = this.required;
        this._instance.min = this.min;
        this._instance.max = this.max;
        this._instance.minLength = this.minLength;
        this._instance.maxLength = this.maxLength;
        this._instance.selections = this.selections;
        this._instance.multiple = this.multiple;
        this._instance.errorMessageTemplate = this.errorMessageTemplate;
    }
    /**
     * Reassign any inputs that have changed
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this._instance) {
            for (let prop in changes) {
                this._instance[prop] = changes[prop].currentValue;
            }
        }
    }
}
TdDynamicElementComponent.decorators = [
    { type: Component, args: [{
                providers: [TdDynamicFormsService, {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TdDynamicElementComponent),
                        multi: true,
                    }],
                selector: 'td-dynamic-element',
                template: '<div tdDynamicContainer></div>'
            }] }
];
/** @nocollapse */
TdDynamicElementComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: TdDynamicFormsService },
    { type: ChangeDetectorRef }
];
TdDynamicElementComponent.propDecorators = {
    dynamicControl: [{ type: Input }],
    label: [{ type: Input }],
    hint: [{ type: Input }],
    name: [{ type: Input }],
    type: [{ type: Input }],
    required: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    minLength: [{ type: Input }],
    maxLength: [{ type: Input }],
    selections: [{ type: Input }],
    multiple: [{ type: Input }],
    errorMessageTemplate: [{ type: Input }],
    childElement: [{ type: ViewChild, args: [TdDynamicElementDirective,] }],
    maxAttr: [{ type: HostBinding, args: ['attr.max',] }],
    minAttr: [{ type: HostBinding, args: ['attr.min',] }]
};
if (false) {
    /** @type {?} */
    TdDynamicElementComponent.prototype._instance;
    /**
     * Sets form control of the element.
     * @type {?}
     */
    TdDynamicElementComponent.prototype.dynamicControl;
    /**
     * Sets label to be displayed.
     * @type {?}
     */
    TdDynamicElementComponent.prototype.label;
    /**
     * Sets hint to be displayed.
     * @type {?}
     */
    TdDynamicElementComponent.prototype.hint;
    /**
     * Sets name to be displayed as attribute.
     * @type {?}
     */
    TdDynamicElementComponent.prototype.name;
    /**
     * Sets type or element of element to be rendered.
     * Throws error if does not exist or no supported.
     * @type {?}
     */
    TdDynamicElementComponent.prototype.type;
    /**
     * Sets required validation checkup (if supported by element).
     * @type {?}
     */
    TdDynamicElementComponent.prototype.required;
    /**
     * Sets min validation checkup (if supported by element).
     * @type {?}
     */
    TdDynamicElementComponent.prototype.min;
    /**
     * Sets max validation checkup (if supported by element).
     * @type {?}
     */
    TdDynamicElementComponent.prototype.max;
    /**
     * Sets minLength validation checkup (if supported by element).
     * @type {?}
     */
    TdDynamicElementComponent.prototype.minLength;
    /**
     * Sets maxLength validation checkup (if supported by element).
     * @type {?}
     */
    TdDynamicElementComponent.prototype.maxLength;
    /**
     * Sets selections for array elements (if supported by element).
     * @type {?}
     */
    TdDynamicElementComponent.prototype.selections;
    /**
     * Sets multiple property for array elements (if supported by element).
     * @type {?}
     */
    TdDynamicElementComponent.prototype.multiple;
    /**
     * Sets error message template so it can be injected into dynamic components.
     * @type {?}
     */
    TdDynamicElementComponent.prototype.errorMessageTemplate;
    /** @type {?} */
    TdDynamicElementComponent.prototype.childElement;
    /** @type {?} */
    TdDynamicElementComponent.prototype._componentFactoryResolver;
    /** @type {?} */
    TdDynamicElementComponent.prototype._dynamicFormsService;
}
//# sourceMappingURL=data:application/json;base64,