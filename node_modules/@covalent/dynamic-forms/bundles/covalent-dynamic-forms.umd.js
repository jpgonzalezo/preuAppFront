(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/material/input'), require('@angular/material/select'), require('@angular/material/checkbox'), require('@angular/material/slider'), require('@angular/material/slide-toggle'), require('@angular/material/icon'), require('@angular/material/button'), require('@angular/material/datepicker'), require('@covalent/core/file'), require('@angular/core'), require('@angular/forms'), require('@angular/cdk/portal'), require('@covalent/core/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@covalent/dynamic-forms', ['exports', '@angular/common', '@angular/material/input', '@angular/material/select', '@angular/material/checkbox', '@angular/material/slider', '@angular/material/slide-toggle', '@angular/material/icon', '@angular/material/button', '@angular/material/datepicker', '@covalent/core/file', '@angular/core', '@angular/forms', '@angular/cdk/portal', '@covalent/core/common', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global.covalent = global.covalent || {}, global.covalent['dynamic-forms'] = {}),global.ng.common,global.ng.material.input,global.ng.material.select,global.ng.material.checkbox,global.ng.material.slider,global.ng.material['slide-toggle'],global.ng.material.icon,global.ng.material.button,global.ng.material.datepicker,global.covalent.core.file,global.ng.core,global.ng.forms,global.ng.cdk.portal,global.covalent.core.common,global.rxjs,global.rxjs.operators));
}(this, (function (exports,common,input,select,checkbox,slider,slideToggle,icon,button,datepicker,file,core,forms,portal,common$1,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicInputComponent = /** @class */ (function () {
        function TdDynamicInputComponent() {
            this.label = '';
            this.hint = '';
            this.type = undefined;
            this.required = undefined;
            this.name = '';
            this.min = undefined;
            this.max = undefined;
            this.minLength = undefined;
            this.maxLength = undefined;
            this.errorMessageTemplate = undefined;
        }
        TdDynamicInputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-input',
                        template: "<div class=\"td-dynamic-input-wrapper\">\n  <mat-form-field class=\"td-dynamic-input-field\">\n    <input #elementInput\n            matInput\n            [formControl]=\"control\"\n            [placeholder]=\"label\"\n            [type]=\"type\"\n            [required]=\"required\"\n            [attr.name]=\"name\"\n            [attr.min]=\"min\"\n            [attr.max]=\"max\"\n            [attr.minLength]=\"minLength\"\n            [attr.maxLength]=\"maxLength\"/>\n    <mat-hint>{{hint}}</mat-hint>\n    <mat-error>\n      <ng-template\n        [ngTemplateOutlet]=\"errorMessageTemplate\"\n        [ngTemplateOutletContext]=\"{control: control, errors: control?.errors}\">\n      </ng-template>\n    </mat-error>\n  </mat-form-field>\n</div>\n",
                        styles: [".td-dynamic-input-wrapper{-ms-flex-direction:row;flex-direction:row;display:-ms-flexbox;display:flex;box-sizing:border-box}.td-dynamic-input-wrapper .td-dynamic-input-field{-ms-flex:1;flex:1;box-sizing:border-box}"]
                    }] }
        ];
        return TdDynamicInputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicFileInputComponent = /** @class */ (function () {
        function TdDynamicFileInputComponent() {
            this.required = undefined;
            this.label = '';
            this.name = '';
            this.hint = '';
            this.errorMessageTemplate = undefined;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        TdDynamicFileInputComponent.prototype._handlefileDrop = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.control.setValue(value);
            };
        TdDynamicFileInputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-file-input',
                        template: "<div class=\"td-dynamic-file-input-wrapper\">\n  <mat-form-field tdFileDrop\n                  class=\"td-dynamic-file-input-field\"\n                  floatLabel=\"never\"\n                  [disabled]=\"control?.disabled\"\n                  (fileDrop)=\"_handlefileDrop($event)\"\n                  (click)=\"!control?.disabled && fileInput.inputElement.click()\"\n                  (keyup.enter)=\"!control?.disabled && fileInput.inputElement.click()\"\n                  (keyup.delete)=\"fileInput.clear()\"\n                  (keyup.backspace)=\"fileInput.clear()\">\n    <input matInput\n          [value]=\"control?.value?.name\"\n          [placeholder]=\"label\"\n          [attr.name]=\"name\"\n          [disabled]=\"control?.disabled\"\n          readonly/>\n    <mat-hint>{{hint}}</mat-hint>\n    <mat-error>\n      <ng-template\n        [ngTemplateOutlet]=\"errorMessageTemplate\"\n        [ngTemplateOutletContext]=\"{control: control, errors: control?.errors}\">\n      </ng-template>\n    </mat-error>\n  </mat-form-field>\n  <button mat-icon-button *ngIf=\"control.value\" (click)=\"fileInput.clear()\" (keyup.enter)=\"fileInput.clear()\">\n    <mat-icon>cancel</mat-icon>\n  </button>\n  <td-file-input class=\"td-file-input\"\n                  #fileInput\n                  [formControl]=\"control\">\n    <mat-icon>folder</mat-icon>\n    <span>{{ label }}</span>\n  </td-file-input>\n</div>",
                        styles: [".td-dynamic-file-input-wrapper{-ms-flex-direction:row;flex-direction:row;display:-ms-flexbox;display:flex;box-sizing:border-box}.td-dynamic-file-input-wrapper .td-dynamic-file-input-field{-ms-flex:1;flex:1;box-sizing:border-box}.td-file-input{margin-left:10px}"]
                    }] }
        ];
        return TdDynamicFileInputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicTextareaComponent = /** @class */ (function () {
        function TdDynamicTextareaComponent() {
            this.label = '';
            this.hint = '';
            this.name = '';
            this.required = undefined;
            this.errorMessageTemplate = undefined;
        }
        TdDynamicTextareaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-textarea',
                        template: "<div class=\"td-dynamic-textarea-wrapper\">\n  <mat-form-field class=\"td-dynamic-textarea-field\">\n    <textarea #elementInput\n            matInput\n            [formControl]=\"control\"\n            [placeholder]=\"label\"\n            [required]=\"required\"\n            [attr.name]=\"name\"\n            rows=\"4\">\n    </textarea>\n    <mat-hint>{{hint}}</mat-hint>\n    <mat-error>\n      <ng-template\n        [ngTemplateOutlet]=\"errorMessageTemplate\"\n        [ngTemplateOutletContext]=\"{control: control, errors: control?.errors}\">\n      </ng-template>\n    </mat-error>\n  </mat-form-field>\n</div>",
                        styles: [".td-dynamic-textarea-wrapper{-ms-flex-direction:row;flex-direction:row;display:-ms-flexbox;display:flex;box-sizing:border-box}.td-dynamic-textarea-wrapper .td-dynamic-textarea-field{-ms-flex:1;flex:1;box-sizing:border-box}"]
                    }] }
        ];
        return TdDynamicTextareaComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicSlideToggleComponent = /** @class */ (function () {
        function TdDynamicSlideToggleComponent() {
            this.label = '';
            this.name = '';
            this.hint = '';
            this.required = false;
        }
        TdDynamicSlideToggleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-slide-toggle',
                        template: "<div class=\"td-dynamic-slide-toggle-wrapper\">\n  <mat-slide-toggle [formControl]=\"control\"\n                    [attr.name]=\"name\"\n                    [required]=\"required\">\n    {{label}}\n  </mat-slide-toggle>\n  <span class=\"mat-hint td-dynamic-element-hint\">{{hint}}</span>\n</div>",
                        styles: [""]
                    }] }
        ];
        return TdDynamicSlideToggleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicCheckboxComponent = /** @class */ (function () {
        function TdDynamicCheckboxComponent() {
            this.label = '';
            this.name = '';
            this.hint = '';
            this.required = false;
        }
        TdDynamicCheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-checkbox',
                        template: "<div class=\"td-dynamic-checkbox-wrapper\">\n  <mat-checkbox [formControl]=\"control\"\n                [name]=\"name\"\n                [required]=\"required\">\n    {{label}}\n  </mat-checkbox>\n  <span class=\"mat-hint td-dynamic-element-hint\">{{hint}}</span>\n</div>",
                        styles: [""]
                    }] }
        ];
        return TdDynamicCheckboxComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicSliderComponent = /** @class */ (function () {
        function TdDynamicSliderComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            this.label = '';
            this.required = undefined;
            this.name = '';
            this.hint = '';
            this.min = undefined;
            this.max = undefined;
        }
        /**
         * @return {?}
         */
        TdDynamicSliderComponent.prototype._handleBlur = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this._changeDetectorRef.markForCheck();
                });
            };
        TdDynamicSliderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-slider',
                        template: "<div class=\"td-dynamic-slider-wrapper mat-form-field mat-form-field-can-float mat-form-field-should-float\"\n      [class.mat-focused]=\"slider._isActive\">\n  <span class=\"mat-form-field-label-wrapper\">\n    <label class=\"mat-form-field-label mat-primary td-slider-label\">\n      {{label}}\n      <span *ngIf=\"required && !control?.disabled\" class=\"mat-form-field-required-marker\">*</span>\n    </label>\n  </span>\n  <div class=\"td-dynamic-slider-field\">\n    <mat-slider #slider\n                class=\"td-dynamic-slider\"\n                [formControl]=\"control\"\n                [attr.name]=\"name\"\n                [min]=\"min\"\n                [max]=\"max\"\n                thumbLabel\n                tickInterval=\"auto\"\n                [required]=\"required\"\n                (blur)=\"_handleBlur()\">\n    </mat-slider>\n  </div>  \n  <span class=\"mat-hint td-dynamic-element-hint\">{{hint}}</span>\n</div>",
                        styles: [":host .td-dynamic-slider-wrapper{display:block}.td-dynamic-slider-field{position:relative;-ms-flex-direction:row;flex-direction:row;display:-ms-flexbox;display:flex;box-sizing:border-box}.td-dynamic-slider-field .td-dynamic-slider{-ms-flex:1;flex:1}"]
                    }] }
        ];
        /** @nocollapse */
        TdDynamicSliderComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        return TdDynamicSliderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicSelectComponent = /** @class */ (function () {
        function TdDynamicSelectComponent() {
            this.label = '';
            this.hint = '';
            this.name = '';
            this.required = undefined;
            this.selections = undefined;
            this.multiple = undefined;
            this.errorMessageTemplate = undefined;
        }
        TdDynamicSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-select',
                        template: "<div class=\"td-dynamic-select-wrapper\">\n  <mat-form-field class=\"td-dynamic-select-field\">\n    <mat-select [formControl]=\"control\"\n                [placeholder]=\"label\"\n                [required]=\"required\"\n                [attr.name]=\"name\"\n                [multiple]=\"multiple\">\n      <mat-option *ngFor=\"let selection of selections\" [value]=\"selection.value || selection\">{{selection.label || selection}}</mat-option>\n    </mat-select>\n    <mat-hint>{{hint}}</mat-hint>\n    <mat-error>\n      <ng-template\n        [ngTemplateOutlet]=\"errorMessageTemplate\"\n        [ngTemplateOutletContext]=\"{control: control, errors: control?.errors}\">\n      </ng-template>\n    </mat-error>\n  </mat-form-field>\n</div>\n",
                        styles: [".td-dynamic-select-wrapper{-ms-flex-direction:row;flex-direction:row;display:-ms-flexbox;display:flex;box-sizing:border-box}.td-dynamic-select-wrapper .td-dynamic-select-field{-ms-flex:1;flex:1;box-sizing:border-box}"]
                    }] }
        ];
        return TdDynamicSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicDatepickerComponent = /** @class */ (function () {
        function TdDynamicDatepickerComponent() {
            this.label = '';
            this.hint = '';
            this.name = '';
            this.type = undefined;
            this.required = undefined;
            this.min = undefined;
            this.max = undefined;
            this.errorMessageTemplate = undefined;
        }
        TdDynamicDatepickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-datepicker',
                        template: "<div class=\"td-dynamic-datepicker-wrapper\">\n  <mat-form-field class=\"td-dynamic-datepicker-field\">\n    <input #elementInput\n            matInput\n            [matDatepicker]=\"dynamicDatePicker\"\n            [formControl]=\"control\"\n            [placeholder]=\"label\"\n            [required]=\"required\"\n            [name]=\"name\"\n            [min]=\"min\"\n            [max]=\"max\"/>\n    <mat-hint>{{hint}}</mat-hint>\n    <mat-error>\n      <ng-template\n        [ngTemplateOutlet]=\"errorMessageTemplate\"\n        [ngTemplateOutletContext]=\"{control: control, errors: control?.errors}\">\n      </ng-template>\n    </mat-error>\n    <mat-datepicker-toggle matSuffix [for]=\"dynamicDatePicker\"></mat-datepicker-toggle>\n    <mat-datepicker #dynamicDatePicker></mat-datepicker>\n  </mat-form-field>\n</div>\n",
                        styles: [".td-dynamic-datepicker-wrapper{-ms-flex-direction:row;flex-direction:row;display:-ms-flexbox;display:flex;box-sizing:border-box}.td-dynamic-datepicker-wrapper .td-dynamic-datepicker-field{-ms-flex:1;flex:1;box-sizing:border-box}"]
                    }] }
        ];
        return TdDynamicDatepickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var TdDynamicType = {
        Text: 'text',
        Boolean: 'boolean',
        Number: 'number',
        Array: 'array',
        Date: 'date',
    };
    /** @enum {string} */
    var TdDynamicElement = {
        Input: 'input',
        Datepicker: 'datepicker',
        Password: 'password',
        Textarea: 'textarea',
        Slider: 'slider',
        SlideToggle: 'slide-toggle',
        Checkbox: 'checkbox',
        Select: 'select',
        FileInput: 'file-input',
    };
    /** @type {?} */
    var DYNAMIC_ELEMENT_NAME_REGEX = /^[^0-9][^\@]*$/;
    var TdDynamicFormsService = /** @class */ (function () {
        function TdDynamicFormsService() {
        }
        /**
         * Method to validate if the [name] is a proper element name.
         * Throws error if name is not valid.
         */
        /**
         * Method to validate if the [name] is a proper element name.
         * Throws error if name is not valid.
         * @param {?} name
         * @return {?}
         */
        TdDynamicFormsService.prototype.validateDynamicElementName = /**
         * Method to validate if the [name] is a proper element name.
         * Throws error if name is not valid.
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!DYNAMIC_ELEMENT_NAME_REGEX.test(name)) {
                    throw new Error('Dynamic element name: "${name}" is not valid.');
                }
            };
        /**
         * Gets component to be rendered depending on [TdDynamicElement | TdDynamicType]
         * Throws error if it does not exists or not supported.
         */
        /**
         * Gets component to be rendered depending on [TdDynamicElement | TdDynamicType]
         * Throws error if it does not exists or not supported.
         * @param {?} element
         * @return {?}
         */
        TdDynamicFormsService.prototype.getDynamicElement = /**
         * Gets component to be rendered depending on [TdDynamicElement | TdDynamicType]
         * Throws error if it does not exists or not supported.
         * @param {?} element
         * @return {?}
         */
            function (element) {
                switch (element) {
                    case TdDynamicType.Text:
                    case TdDynamicType.Number:
                    case TdDynamicElement.Input:
                    case TdDynamicElement.Password:
                        return TdDynamicInputComponent;
                    case TdDynamicElement.Textarea:
                        return TdDynamicTextareaComponent;
                    case TdDynamicType.Boolean:
                    case TdDynamicElement.SlideToggle:
                        return TdDynamicSlideToggleComponent;
                    case TdDynamicElement.Checkbox:
                        return TdDynamicCheckboxComponent;
                    case TdDynamicElement.Slider:
                        return TdDynamicSliderComponent;
                    case TdDynamicType.Array:
                    case TdDynamicElement.Select:
                        return TdDynamicSelectComponent;
                    case TdDynamicElement.FileInput:
                        return TdDynamicFileInputComponent;
                    case TdDynamicElement.Datepicker:
                    case TdDynamicType.Date:
                        return TdDynamicDatepickerComponent;
                    default:
                        throw new Error("Error: type " + element + " does not exist or not supported.");
                }
            };
        /**
         * Creates form control for element depending [ITdDynamicElementConfig] properties.
         */
        /**
         * Creates form control for element depending [ITdDynamicElementConfig] properties.
         * @param {?} config
         * @return {?}
         */
        TdDynamicFormsService.prototype.createFormControl = /**
         * Creates form control for element depending [ITdDynamicElementConfig] properties.
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var validator = this.createValidators(config);
                return new forms.FormControl({ value: config.default, disabled: config.disabled }, validator);
            };
        /**
         * Creates form validationdepending [ITdDynamicElementConfig] properties.
         */
        /**
         * Creates form validationdepending [ITdDynamicElementConfig] properties.
         * @param {?} config
         * @return {?}
         */
        TdDynamicFormsService.prototype.createValidators = /**
         * Creates form validationdepending [ITdDynamicElementConfig] properties.
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var validator;
                if (config.required) {
                    validator = forms.Validators.required;
                }
                if (config.max || config.max === 0) {
                    validator = forms.Validators.compose([validator, forms.Validators.max(parseFloat(config.max))]);
                }
                if (config.min || config.min === 0) {
                    validator = forms.Validators.compose([validator, forms.Validators.min(parseFloat(config.min))]);
                }
                if (config.maxLength || config.maxLength === 0) {
                    validator = forms.Validators.compose([validator, forms.Validators.maxLength(parseFloat(config.maxLength))]);
                }
                if (config.minLength || config.minLength === 0) {
                    validator = forms.Validators.compose([validator, forms.Validators.minLength(parseFloat(config.minLength))]);
                }
                // Add provided custom validators to the validator function
                if (config.validators) {
                    config.validators.forEach(function (validatorConfig) {
                        validator = forms.Validators.compose([validator, validatorConfig.validator]);
                    });
                }
                return validator;
            };
        TdDynamicFormsService.decorators = [
            { type: core.Injectable }
        ];
        return TdDynamicFormsService;
    }());
    /**
     * @param {?} parent
     * @return {?}
     */
    function DYNAMIC_FORMS_PROVIDER_FACTORY(parent) {
        return parent || new TdDynamicFormsService();
    }
    /** @type {?} */
    var DYNAMIC_FORMS_PROVIDER = {
        // If there is already a service available, use that. Otherwise, provide a new one.
        provide: TdDynamicFormsService,
        deps: [[new core.Optional(), new core.SkipSelf(), TdDynamicFormsService]],
        useFactory: DYNAMIC_FORMS_PROVIDER_FACTORY,
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicElementBase = /** @class */ (function () {
        function TdDynamicElementBase(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
        }
        return TdDynamicElementBase;
    }());
    /* tslint:disable-next-line */
    /** @type {?} */
    var _TdDynamicElementMixinBase = common$1.mixinControlValueAccessor(TdDynamicElementBase);
    var TdDynamicFormsErrorTemplate = /** @class */ (function (_super) {
        __extends(TdDynamicFormsErrorTemplate, _super);
        function TdDynamicFormsErrorTemplate(templateRef, viewContainerRef) {
            return _super.call(this, templateRef, viewContainerRef) || this;
        }
        TdDynamicFormsErrorTemplate.decorators = [
            { type: core.Directive, args: [{ selector: '[tdDynamicFormsError]ng-template' },] }
        ];
        /** @nocollapse */
        TdDynamicFormsErrorTemplate.ctorParameters = function () {
            return [
                { type: core.TemplateRef },
                { type: core.ViewContainerRef }
            ];
        };
        TdDynamicFormsErrorTemplate.propDecorators = {
            tdDynamicFormsError: [{ type: core.Input }]
        };
        return TdDynamicFormsErrorTemplate;
    }(portal.TemplatePortalDirective));
    var TdDynamicElementDirective = /** @class */ (function () {
        function TdDynamicElementDirective(viewContainer) {
            this.viewContainer = viewContainer;
        }
        TdDynamicElementDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[tdDynamicContainer]',
                    },] }
        ];
        /** @nocollapse */
        TdDynamicElementDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef }
            ];
        };
        return TdDynamicElementDirective;
    }());
    var TdDynamicElementComponent = /** @class */ (function (_super) {
        __extends(TdDynamicElementComponent, _super);
        function TdDynamicElementComponent(_componentFactoryResolver, _dynamicFormsService, _changeDetectorRef) {
            var _this = _super.call(this, _changeDetectorRef) || this;
            _this._componentFactoryResolver = _componentFactoryResolver;
            _this._dynamicFormsService = _dynamicFormsService;
            /**
             * Sets label to be displayed.
             */
            _this.label = '';
            /**
             * Sets hint to be displayed.
             */
            _this.hint = '';
            /**
             * Sets name to be displayed as attribute.
             */
            _this.name = '';
            /**
             * Sets type or element of element to be rendered.
             * Throws error if does not exist or no supported.
             */
            _this.type = undefined;
            /**
             * Sets required validation checkup (if supported by element).
             */
            _this.required = undefined;
            /**
             * Sets min validation checkup (if supported by element).
             */
            _this.min = undefined;
            /**
             * Sets max validation checkup (if supported by element).
             */
            _this.max = undefined;
            /**
             * Sets minLength validation checkup (if supported by element).
             */
            _this.minLength = undefined;
            /**
             * Sets maxLength validation checkup (if supported by element).
             */
            _this.maxLength = undefined;
            /**
             * Sets selections for array elements (if supported by element).
             */
            _this.selections = undefined;
            /**
             * Sets multiple property for array elements (if supported by element).
             */
            _this.multiple = undefined;
            /**
             * Sets error message template so it can be injected into dynamic components.
             */
            _this.errorMessageTemplate = undefined;
            return _this;
        }
        Object.defineProperty(TdDynamicElementComponent.prototype, "maxAttr", {
            get: /**
             * @return {?}
             */ function () {
                return this.max;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdDynamicElementComponent.prototype, "minAttr", {
            get: /**
             * @return {?}
             */ function () {
                return this.min;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TdDynamicElementComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var component = ( /** @type {?} */(this.type)) instanceof core.Type ? this.type : this._dynamicFormsService.getDynamicElement(this.type);
                /** @type {?} */
                var ref = this._componentFactoryResolver.
                    resolveComponentFactory(component)
                    .create(this.childElement.viewContainer.injector);
                this.childElement.viewContainer.insert(ref.hostView);
                this._instance = ref.instance;
                this._instance.control = this.dynamicControl;
                this._instance.label = this.label;
                this._instance.hint = this.hint;
                this._instance.name = this.name;
                this._instance.type = this.type;
                this._instance.value = this.value;
                this._instance.required = this.required;
                this._instance.min = this.min;
                this._instance.max = this.max;
                this._instance.minLength = this.minLength;
                this._instance.maxLength = this.maxLength;
                this._instance.selections = this.selections;
                this._instance.multiple = this.multiple;
                this._instance.errorMessageTemplate = this.errorMessageTemplate;
            };
        /**
         * Reassign any inputs that have changed
         */
        /**
         * Reassign any inputs that have changed
         * @param {?} changes
         * @return {?}
         */
        TdDynamicElementComponent.prototype.ngOnChanges = /**
         * Reassign any inputs that have changed
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this._instance) {
                    for (var prop in changes) {
                        this._instance[prop] = changes[prop].currentValue;
                    }
                }
            };
        TdDynamicElementComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [TdDynamicFormsService, {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return TdDynamicElementComponent; }),
                                multi: true,
                            }],
                        selector: 'td-dynamic-element',
                        template: '<div tdDynamicContainer></div>'
                    }] }
        ];
        /** @nocollapse */
        TdDynamicElementComponent.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver },
                { type: TdDynamicFormsService },
                { type: core.ChangeDetectorRef }
            ];
        };
        TdDynamicElementComponent.propDecorators = {
            dynamicControl: [{ type: core.Input }],
            label: [{ type: core.Input }],
            hint: [{ type: core.Input }],
            name: [{ type: core.Input }],
            type: [{ type: core.Input }],
            required: [{ type: core.Input }],
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            minLength: [{ type: core.Input }],
            maxLength: [{ type: core.Input }],
            selections: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            errorMessageTemplate: [{ type: core.Input }],
            childElement: [{ type: core.ViewChild, args: [TdDynamicElementDirective,] }],
            maxAttr: [{ type: core.HostBinding, args: ['attr.max',] }],
            minAttr: [{ type: core.HostBinding, args: ['attr.min',] }]
        };
        return TdDynamicElementComponent;
    }(_TdDynamicElementMixinBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TdDynamicFormsComponent = /** @class */ (function () {
        function TdDynamicFormsComponent(_formBuilder, _dynamicFormsService, _changeDetectorRef) {
            this._formBuilder = _formBuilder;
            this._dynamicFormsService = _dynamicFormsService;
            this._changeDetectorRef = _changeDetectorRef;
            this._renderedElements = [];
            this._templateMap = new Map();
            this._destroy$ = new rxjs.Subject();
            this._destroyControl$ = new rxjs.Subject();
            this.dynamicForm = this._formBuilder.group({});
        }
        Object.defineProperty(TdDynamicFormsComponent.prototype, "elements", {
            get: /**
             * @return {?}
             */ function () {
                return this._renderedElements;
            },
            /**
             * elements: ITdDynamicElementConfig[]
             * JS Object that will render the elements depending on its config.
             * [name] property is required.
             */
            set: /**
             * elements: ITdDynamicElementConfig[]
             * JS Object that will render the elements depending on its config.
             * [name] property is required.
             * @param {?} elements
             * @return {?}
             */ function (elements) {
                if (elements) {
                    this._elements = elements;
                }
                else {
                    this._elements = [];
                }
                this._rerenderElements();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdDynamicFormsComponent.prototype, "form", {
            /**
             * Getter property for dynamic [FormGroup].
             */
            get: /**
             * Getter property for dynamic [FormGroup].
             * @return {?}
             */ function () {
                return this.dynamicForm;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdDynamicFormsComponent.prototype, "valid", {
            /**
             * Getter property for [valid] of dynamic [FormGroup].
             */
            get: /**
             * Getter property for [valid] of dynamic [FormGroup].
             * @return {?}
             */ function () {
                if (this.dynamicForm) {
                    return this.dynamicForm.valid;
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdDynamicFormsComponent.prototype, "value", {
            /**
             * Getter property for [value] of dynamic [FormGroup].
             */
            get: /**
             * Getter property for [value] of dynamic [FormGroup].
             * @return {?}
             */ function () {
                if (this.dynamicForm) {
                    return this.dynamicForm.value;
                }
                return {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdDynamicFormsComponent.prototype, "errors", {
            /**
             * Getter property for [errors] of dynamic [FormGroup].
             */
            get: /**
             * Getter property for [errors] of dynamic [FormGroup].
             * @return {?}
             */ function () {
                if (this.dynamicForm) {
                    /** @type {?} */
                    var errors = {};
                    for (var name_1 in this.dynamicForm.controls) {
                        errors[name_1] = this.dynamicForm.controls[name_1].errors;
                    }
                    return errors;
                }
                return {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdDynamicFormsComponent.prototype, "controls", {
            /**
             * Getter property for [controls] of dynamic [FormGroup].
             */
            get: /**
             * Getter property for [controls] of dynamic [FormGroup].
             * @return {?}
             */ function () {
                if (this.dynamicForm) {
                    return this.dynamicForm.controls;
                }
                return {};
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TdDynamicFormsComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this._updateErrorTemplates();
            };
        /**
         * @return {?}
         */
        TdDynamicFormsComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._destroy$.next();
                this._destroy$.complete();
                this._destroyControl$.complete();
            };
        /**
         * Refreshes the form and rerenders all validator/element modifications.
         */
        /**
         * Refreshes the form and rerenders all validator/element modifications.
         * @return {?}
         */
        TdDynamicFormsComponent.prototype.refresh = /**
         * Refreshes the form and rerenders all validator/element modifications.
         * @return {?}
         */
            function () {
                this._rerenderElements();
                this._updateErrorTemplates();
            };
        /**
         * Getter method for error template references
         */
        /**
         * Getter method for error template references
         * @param {?} name
         * @return {?}
         */
        TdDynamicFormsComponent.prototype.getErrorTemplateRef = /**
         * Getter method for error template references
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this._templateMap.get(name);
            };
        /**
         * Loads error templates and sets them in a map for faster access.
         */
        /**
         * Loads error templates and sets them in a map for faster access.
         * @return {?}
         */
        TdDynamicFormsComponent.prototype._updateErrorTemplates = /**
         * Loads error templates and sets them in a map for faster access.
         * @return {?}
         */
            function () {
                this._templateMap = new Map();
                for (var i = 0; i < this._errorTemplates.toArray().length; i++) {
                    this._templateMap.set(this._errorTemplates.toArray()[i].tdDynamicFormsError, this._errorTemplates.toArray()[i].templateRef);
                }
            };
        /**
         * @return {?}
         */
        TdDynamicFormsComponent.prototype._rerenderElements = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._clearRemovedElements();
                this._renderedElements = [];
                /** @type {?} */
                var duplicates = [];
                this._elements.forEach(function (elem) {
                    _this._dynamicFormsService.validateDynamicElementName(elem.name);
                    if (duplicates.indexOf(elem.name) > -1) {
                        throw new Error("Dynamic element name: \"" + elem.name + "\" is duplicated");
                    }
                    duplicates.push(elem.name);
                    /** @type {?} */
                    var dynamicElement = _this.dynamicForm.get(elem.name);
                    if (!dynamicElement) {
                        _this.dynamicForm.addControl(elem.name, _this._dynamicFormsService.createFormControl(elem));
                        _this._subscribeToControlStatusChanges(elem.name);
                    }
                    else {
                        dynamicElement.setValue(elem.default);
                        dynamicElement.markAsPristine();
                        dynamicElement.markAsUntouched();
                        if (elem.disabled) {
                            dynamicElement.disable();
                        }
                        else {
                            dynamicElement.enable();
                        }
                        dynamicElement.setValidators(_this._dynamicFormsService.createValidators(elem));
                    }
                    // copy objects so they are only changes when calling this method
                    _this._renderedElements.push(Object.assign({}, elem));
                });
                // call a change detection since the whole form might change
                this._changeDetectorRef.detectChanges();
                rxjs.timer().toPromise().then(function () {
                    // call a markForCheck so elements are rendered correctly in OnPush
                    _this._changeDetectorRef.markForCheck();
                });
            };
        /**
         * @return {?}
         */
        TdDynamicFormsComponent.prototype._clearRemovedElements = /**
         * @return {?}
         */
            function () {
                var _this = this;
                for (var i = 0; i < this._renderedElements.length; i++) {
                    for (var j = 0; j < this._elements.length; j++) {
                        // check if the name of the element is still there removed
                        if (this._renderedElements[i].name === this._elements[j].name) {
                            delete this._renderedElements[i];
                            break;
                        }
                    }
                }
                // remove elements that were removed from the array
                this._renderedElements.forEach(function (elem) {
                    _this._destroyControl$.next(elem.name);
                    _this.dynamicForm.removeControl(elem.name);
                });
            };
        // Updates component when manually adding errors to controls
        // Updates component when manually adding errors to controls
        /**
         * @param {?} elementName
         * @return {?}
         */
        TdDynamicFormsComponent.prototype._subscribeToControlStatusChanges =
            // Updates component when manually adding errors to controls
            /**
             * @param {?} elementName
             * @return {?}
             */
            function (elementName) {
                var _this = this;
                /** @type {?} */
                var control = this.controls[elementName];
                /** @type {?} */
                var controlDestroyed$ = this._destroyControl$
                    .pipe(operators.filter(function (destroyedElementName) { return destroyedElementName === elementName; }));
                control.statusChanges
                    .pipe(operators.takeUntil(this._destroy$), operators.takeUntil(controlDestroyed$)).subscribe(function () {
                    _this._changeDetectorRef.markForCheck();
                });
            };
        TdDynamicFormsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'td-dynamic-forms',
                        template: "<form [formGroup]=\"dynamicForm\" novalidate>\n  <div class=\"td-dynamic-form-wrapper\">\n    <ng-template let-element ngFor [ngForOf]=\"elements\">\n      <div class=\"td-dynamic-element-wrapper\"\n          [style.max-width.%]=\"element.flex ? element.flex : 100\"\n          [style.flex]=\"'1 1 ' + (element.flex ? element.flex : 100) + '%'\"\n          [style.-ms-flex]=\"'1 1 ' + (element.flex ? element.flex : 100) + '%'\"\n          [style.-webkit-box-flex]=\"1\">\n        <td-dynamic-element\n          #dynamicElement\n          *ngIf=\"dynamicForm.controls[element.name]\"\n          [formControlName]=\"element.name\"\n          [dynamicControl]=\"dynamicForm.controls[element.name]\"\n          [id]=\"element.name\"\n          [name]=\"element.name\"\n          [label]=\"element.label || element.name\"\n          [hint]=\"element.hint\"\n          [type]=\"element.type\"\n          [required]=\"element.required\"\n          [min]=\"element.min\"\n          [max]=\"element.max\"\n          [minLength]=\"element.minLength\"\n          [maxLength]=\"element.maxLength\"\n          [selections]=\"element.selections\"\n          [multiple]=\"element.multiple\"\n          [errorMessageTemplate]=\"getErrorTemplateRef(element.name)\">\n        </td-dynamic-element>\n      </div>\n    </ng-template>\n  </div>\n  <ng-content></ng-content>\n</form>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [".td-dynamic-form-wrapper{-ms-flex-wrap:wrap;flex-wrap:wrap;box-sizing:border-box;display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;max-width:100%;-ms-flex-pack:start;justify-content:start}.td-dynamic-form-wrapper ::ng-deep .mat-form-field-infix{width:auto}.td-dynamic-form-wrapper ::ng-deep .td-dynamic-element-hint{font-size:75%;display:block}.td-dynamic-form-wrapper .td-dynamic-element-wrapper{max-height:100%;box-sizing:border-box;position:relative;padding:4px 4px 8px}"]
                    }] }
        ];
        /** @nocollapse */
        TdDynamicFormsComponent.ctorParameters = function () {
            return [
                { type: forms.FormBuilder },
                { type: TdDynamicFormsService },
                { type: core.ChangeDetectorRef }
            ];
        };
        TdDynamicFormsComponent.propDecorators = {
            _errorTemplates: [{ type: core.ContentChildren, args: [TdDynamicFormsErrorTemplate,] }],
            elements: [{ type: core.Input, args: ['elements',] }]
        };
        return TdDynamicFormsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TD_DYNAMIC_FORMS = [
        TdDynamicFormsComponent,
        TdDynamicElementComponent,
        TdDynamicElementDirective,
        TdDynamicFormsErrorTemplate,
    ];
    /** @type {?} */
    var TD_DYNAMIC_FORMS_ENTRY_COMPONENTS = [
        TdDynamicInputComponent,
        TdDynamicFileInputComponent,
        TdDynamicTextareaComponent,
        TdDynamicSlideToggleComponent,
        TdDynamicCheckboxComponent,
        TdDynamicSliderComponent,
        TdDynamicSelectComponent,
        TdDynamicDatepickerComponent,
    ];
    var CovalentDynamicFormsModule = /** @class */ (function () {
        function CovalentDynamicFormsModule() {
        }
        CovalentDynamicFormsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TD_DYNAMIC_FORMS,
                            TD_DYNAMIC_FORMS_ENTRY_COMPONENTS,
                        ],
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            input.MatInputModule,
                            select.MatSelectModule,
                            checkbox.MatCheckboxModule,
                            slider.MatSliderModule,
                            slideToggle.MatSlideToggleModule,
                            icon.MatIconModule,
                            button.MatButtonModule,
                            datepicker.MatDatepickerModule,
                            common$1.CovalentCommonModule,
                            file.CovalentFileModule,
                        ],
                        exports: [
                            TD_DYNAMIC_FORMS,
                            TD_DYNAMIC_FORMS_ENTRY_COMPONENTS,
                        ],
                        providers: [
                            DYNAMIC_FORMS_PROVIDER,
                        ],
                        entryComponents: [TD_DYNAMIC_FORMS_ENTRY_COMPONENTS],
                    },] }
        ];
        return CovalentDynamicFormsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.CovalentDynamicFormsModule = CovalentDynamicFormsModule;
    exports.TdDynamicFormsComponent = TdDynamicFormsComponent;
    exports.TdDynamicElementBase = TdDynamicElementBase;
    exports._TdDynamicElementMixinBase = _TdDynamicElementMixinBase;
    exports.TdDynamicFormsErrorTemplate = TdDynamicFormsErrorTemplate;
    exports.TdDynamicElementDirective = TdDynamicElementDirective;
    exports.TdDynamicElementComponent = TdDynamicElementComponent;
    exports.DYNAMIC_FORMS_PROVIDER_FACTORY = DYNAMIC_FORMS_PROVIDER_FACTORY;
    exports.TdDynamicType = TdDynamicType;
    exports.TdDynamicElement = TdDynamicElement;
    exports.DYNAMIC_ELEMENT_NAME_REGEX = DYNAMIC_ELEMENT_NAME_REGEX;
    exports.TdDynamicFormsService = TdDynamicFormsService;
    exports.DYNAMIC_FORMS_PROVIDER = DYNAMIC_FORMS_PROVIDER;
    exports.TdDynamicTextareaComponent = TdDynamicTextareaComponent;
    exports.TdDynamicSliderComponent = TdDynamicSliderComponent;
    exports.TdDynamicSlideToggleComponent = TdDynamicSlideToggleComponent;
    exports.TdDynamicSelectComponent = TdDynamicSelectComponent;
    exports.TdDynamicInputComponent = TdDynamicInputComponent;
    exports.TdDynamicFileInputComponent = TdDynamicFileInputComponent;
    exports.TdDynamicDatepickerComponent = TdDynamicDatepickerComponent;
    exports.TdDynamicCheckboxComponent = TdDynamicCheckboxComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=covalent-dynamic-forms.umd.js.map