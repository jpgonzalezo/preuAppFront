/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { HttpParams } from '@angular/common/http';
import { tdHttpRESTParam } from '../params/abstract-param.decorator';
import { of } from 'rxjs';
/** @type {?} */
export const NOOP_HTTP = of(undefined);
/**
 * Method used to copy parameters from an array or HttpParams object
 * into a centrilized HttpParams object
 * \@internal
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function parseParams(target, source) {
    /** @type {?} */
    let queryParams = target;
    if (source instanceof HttpParams) {
        source.keys().forEach((key) => {
            // skip if value is undefined
            if (((/** @type {?} */ (source))).get(key) !== undefined) {
                queryParams = queryParams.set(key, ((/** @type {?} */ (source))).get(key));
            }
        });
    }
    else {
        for (let key in source) {
            // skip if value is undefined
            if ((/** @type {?} */ (source[key])) !== undefined) {
                queryParams = queryParams.set(key, (/** @type {?} */ (source[key])));
            }
        }
    }
    return queryParams;
}
/**
 * Abstract implementation of the http method decorator
 * \@internal
 * @param {?} config
 * @return {?}
 */
export function TdAbstractMethod(config) {
    return function (target, propertyName, descriptor) {
        /** @type {?} */
        let wrappedFunction = descriptor.value;
        // replace method call with our own and proxy it
        descriptor.value = function () {
            try {
                /** @type {?} */
                let replacedPath = config.path;
                /** @type {?} */
                let parameters = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyName);
                /** @type {?} */
                let newArgs = [];
                /** @type {?} */
                let body;
                /** @type {?} */
                let queryParams = new HttpParams();
                if (parameters) {
                    // map parameters and see which type they are to act on them
                    for (let parameter of parameters) {
                        if (parameter.type === 'param') {
                            newArgs[parameter.index] = arguments[parameter.index];
                            replacedPath = replacedPath.replace(':' + parameter.param, arguments[parameter.index]);
                        }
                        else if (parameter.type === 'body') {
                            newArgs[parameter.index] = arguments[parameter.index];
                            body = arguments[parameter.index];
                        }
                        else if (parameter.type === 'queryParams') {
                            newArgs[parameter.index] = arguments[parameter.index];
                            /** @type {?} */
                            let qParams = arguments[parameter.index];
                            if (config.options && config.options.params) {
                                queryParams = parseParams(queryParams, config.options.params);
                            }
                            if (qParams) {
                                queryParams = parseParams(queryParams, qParams);
                            }
                        }
                    }
                }
                // tslint:disable-next-line
                /** @type {?} */
                let url = this.baseUrl + replacedPath;
                /** @type {?} */
                let options = Object.assign({}, config.options, {
                    body: body,
                    params: queryParams,
                });
                // tslint:disable-next-line
                /** @type {?} */
                let request = this.buildRequest(config.method, url, options);
                if (parameters) {
                    // see which one was the response parameter so we can set the request observable
                    for (let parameter of parameters) {
                        if (parameter.type === 'response') {
                            newArgs[parameter.index] = request;
                        }
                    }
                }
                // tslint:disable-next-line
                /** @type {?} */
                let response = wrappedFunction.apply(this, newArgs);
                // if the response is NOOP_HTTP or undefined, then we return the request as it is
                // else we return the response from the inner function
                if (response === NOOP_HTTP || response === undefined) {
                    return request;
                }
                else {
                    return response;
                }
            }
            catch (error) {
                // tslint:disable-next-line
                console.error(error);
            }
        };
    };
}
//# sourceMappingURL=data:application/json;base64,