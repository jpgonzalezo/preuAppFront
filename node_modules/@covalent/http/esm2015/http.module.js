/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { NgModule, Injector, InjectionToken } from '@angular/core';
import { HttpClientModule, HttpHandler } from '@angular/common/http';
import { InternalHttpService } from './actions/http.mixin';
import { TdHttpService, TdInterceptorBehaviorService } from './interceptors/http.service';
import { TdURLRegExpInterceptorMatcher } from './interceptors/url-regexp-interceptor-matcher.class';
/** @type {?} */
export const HTTP_CONFIG = new InjectionToken('HTTP_CONFIG');
/**
 * @param {?} handler
 * @param {?} injector
 * @param {?} config
 * @return {?}
 */
export function httpFactory(handler, injector, config) {
    return new TdHttpService(handler, new TdInterceptorBehaviorService(injector, new TdURLRegExpInterceptorMatcher(), config.interceptors));
}
/** @type {?} */
export const HTTP_INTERCEPTOR_PROVIDER = {
    provide: TdHttpService,
    useFactory: httpFactory,
    deps: [HttpHandler, Injector, HTTP_CONFIG],
};
export class CovalentHttpModule {
    /**
     * @param {?} _internalHttpService
     */
    constructor(_internalHttpService) {
        this._internalHttpService = _internalHttpService;
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = { interceptors: [] }) {
        return {
            ngModule: CovalentHttpModule,
            providers: [{
                    provide: HTTP_CONFIG,
                    useValue: config,
                },
                HTTP_INTERCEPTOR_PROVIDER,
            ],
        };
    }
}
CovalentHttpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpClientModule,
                ],
                providers: [
                    InternalHttpService,
                ],
            },] }
];
/** @nocollapse */
CovalentHttpModule.ctorParameters = () => [
    { type: InternalHttpService }
];
if (false) {
    /** @type {?} */
    CovalentHttpModule.prototype._internalHttpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY292YWxlbnQvaHR0cC8iLCJzb3VyY2VzIjpbImh0dHAubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVyRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLDRCQUE0QixFQUE0QixNQUFNLDZCQUE2QixDQUFDO0FBQ3BILE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDOztBQUVwRyxNQUFNLE9BQU8sV0FBVyxHQUErQixJQUFJLGNBQWMsQ0FBYSxhQUFhLENBQUM7Ozs7Ozs7QUFJcEcsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUFvQixFQUFFLFFBQWtCLEVBQUUsTUFBa0I7SUFDdEYsT0FBTyxJQUFJLGFBQWEsQ0FDWixPQUFPLEVBQ1AsSUFBSSw0QkFBNEIsQ0FBQyxRQUFRLEVBQUUsSUFBSSw2QkFBNkIsRUFBRSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FDckcsQ0FBQztBQUNkLENBQUM7O0FBRUQsTUFBTSxPQUFPLHlCQUF5QixHQUFhO0lBQ2pELE9BQU8sRUFBRSxhQUFhO0lBQ3RCLFVBQVUsRUFBRSxXQUFXO0lBQ3ZCLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDO0NBQzNDO0FBVUQsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUU3QixZQUFvQixvQkFBeUM7UUFBekMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFxQjtJQUFHLENBQUM7Ozs7O0lBRWpFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBcUIsRUFBQyxZQUFZLEVBQUUsRUFBRSxFQUFDO1FBQ3BELE9BQU87WUFDTCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRSxDQUFDO29CQUNSLE9BQU8sRUFBRSxXQUFXO29CQUNwQixRQUFRLEVBQUUsTUFBTTtpQkFDakI7Z0JBQ0QseUJBQXlCO2FBQzFCO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXRCRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLGdCQUFnQjtpQkFDakI7Z0JBQ0QsU0FBUyxFQUFFO29CQUNULG1CQUFtQjtpQkFDcEI7YUFDRjs7OztZQTdCUSxtQkFBbUI7Ozs7SUFnQ2Qsa0RBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdG9yLCBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUsIEh0dHBIYW5kbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBJbnRlcm5hbEh0dHBTZXJ2aWNlIH0gZnJvbSAnLi9hY3Rpb25zL2h0dHAubWl4aW4nO1xuXG5pbXBvcnQgeyBUZEh0dHBTZXJ2aWNlLCBUZEludGVyY2VwdG9yQmVoYXZpb3JTZXJ2aWNlLCBJVGRIdHRwSW50ZXJjZXB0b3JDb25maWcgfSBmcm9tICcuL2ludGVyY2VwdG9ycy9odHRwLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGRVUkxSZWdFeHBJbnRlcmNlcHRvck1hdGNoZXIgfSBmcm9tICcuL2ludGVyY2VwdG9ycy91cmwtcmVnZXhwLWludGVyY2VwdG9yLW1hdGNoZXIuY2xhc3MnO1xuXG5leHBvcnQgY29uc3QgSFRUUF9DT05GSUc6IEluamVjdGlvblRva2VuPEh0dHBDb25maWc+ID0gbmV3IEluamVjdGlvblRva2VuPEh0dHBDb25maWc+KCdIVFRQX0NPTkZJRycpO1xuXG5leHBvcnQgdHlwZSBIdHRwQ29uZmlnID0ge2ludGVyY2VwdG9yczogSVRkSHR0cEludGVyY2VwdG9yQ29uZmlnW119O1xuXG5leHBvcnQgZnVuY3Rpb24gaHR0cEZhY3RvcnkoaGFuZGxlcjogSHR0cEhhbmRsZXIsIGluamVjdG9yOiBJbmplY3RvciwgY29uZmlnOiBIdHRwQ29uZmlnKTogVGRIdHRwU2VydmljZSB7XG4gIHJldHVybiBuZXcgVGRIdHRwU2VydmljZShcbiAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgbmV3IFRkSW50ZXJjZXB0b3JCZWhhdmlvclNlcnZpY2UoaW5qZWN0b3IsIG5ldyBUZFVSTFJlZ0V4cEludGVyY2VwdG9yTWF0Y2hlcigpLCBjb25maWcuaW50ZXJjZXB0b3JzKSxcbiAgICAgICAgICAgICk7XG59XG5cbmV4cG9ydCBjb25zdCBIVFRQX0lOVEVSQ0VQVE9SX1BST1ZJREVSOiBQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogVGRIdHRwU2VydmljZSxcbiAgdXNlRmFjdG9yeTogaHR0cEZhY3RvcnksXG4gIGRlcHM6IFtIdHRwSGFuZGxlciwgSW5qZWN0b3IsIEhUVFBfQ09ORklHXSxcbn07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBJbnRlcm5hbEh0dHBTZXJ2aWNlLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBDb3ZhbGVudEh0dHBNb2R1bGUge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2ludGVybmFsSHR0cFNlcnZpY2U6IEludGVybmFsSHR0cFNlcnZpY2UpIHt9XG5cbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBIdHRwQ29uZmlnID0ge2ludGVyY2VwdG9yczogW119KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBDb3ZhbGVudEh0dHBNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFt7XG4gICAgICAgICAgcHJvdmlkZTogSFRUUF9DT05GSUcsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZyxcbiAgICAgICAgfSxcbiAgICAgICAgSFRUUF9JTlRFUkNFUFRPUl9QUk9WSURFUixcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19