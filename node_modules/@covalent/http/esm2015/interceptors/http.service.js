/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
/**
 * @record
 */
export function ITdHttpInterceptorConfig() { }
if (false) {
    /** @type {?} */
    ITdHttpInterceptorConfig.prototype.interceptor;
    /** @type {?} */
    ITdHttpInterceptorConfig.prototype.paths;
}
export class TdInterceptorBehaviorService {
    /**
     * @param {?} _injector
     * @param {?} _httpInterceptorMatcher
     * @param {?} requestInterceptorConfigs
     */
    constructor(_injector, _httpInterceptorMatcher, requestInterceptorConfigs) {
        this._injector = _injector;
        this._httpInterceptorMatcher = _httpInterceptorMatcher;
        this._requestInterceptors = [];
        requestInterceptorConfigs.forEach((config) => {
            this._requestInterceptors.push({
                interceptor: (/** @type {?} */ (_injector.get(config.interceptor))),
                paths: config.paths,
            });
        });
    }
    /**
     * @return {?}
     */
    get requestInterceptors() {
        return this._requestInterceptors;
    }
    /**
     * @return {?}
     */
    get httpInterceptorMatcher() {
        return this._httpInterceptorMatcher;
    }
}
if (false) {
    /** @type {?} */
    TdInterceptorBehaviorService.prototype._requestInterceptors;
    /** @type {?} */
    TdInterceptorBehaviorService.prototype._injector;
    /** @type {?} */
    TdInterceptorBehaviorService.prototype._httpInterceptorMatcher;
}
export class TdHttpService extends HttpClient {
    /**
     * @param {?} _handler
     * @param {?} _interceptorBehavior
     */
    constructor(_handler, _interceptorBehavior) {
        super(_handler);
        this._handler = _handler;
        this._interceptorBehavior = _interceptorBehavior;
    }
    /**
     * @param {?} first
     * @param {?=} url
     * @param {?=} options
     * @return {?}
     */
    request(first, url, options = {}) {
        /** @type {?} */
        let interceptors = this._interceptorBehavior.requestInterceptors.filter((mapping) => {
            return this._interceptorBehavior.httpInterceptorMatcher.matches({ url: url }, mapping);
        }).map((mapping) => {
            return mapping.interceptor;
        });
        return this._setupRequest(first, url, options, interceptors);
    }
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @param {?} interceptors
     * @return {?}
     */
    _setupRequest(method, url, options, interceptors) {
        try {
            options = this._requestResolve(options, interceptors);
        }
        catch (e) {
            return new Observable((subscriber) => {
                subscriber.error(e);
            });
        }
        return this._handleResponseResolve(super.request((/** @type {?} */ (method)), url, options), interceptors);
    }
    /**
     * @param {?} options
     * @param {?} interceptors
     * @return {?}
     */
    _requestResolve(options, interceptors) {
        interceptors.forEach((interceptor) => {
            if (interceptor.handleOptions) {
                options = interceptor.handleOptions(options);
            }
        });
        return options;
    }
    /**
     * @param {?} obs
     * @param {?} interceptors
     * @return {?}
     */
    _handleResponseResolve(obs, interceptors) {
        interceptors.reverse().forEach((interceptor) => {
            if (interceptor.handleResponse) {
                obs = interceptor.handleResponse(obs);
            }
        });
        return obs;
    }
}
if (false) {
    /** @type {?} */
    TdHttpService.prototype._handler;
    /** @type {?} */
    TdHttpService.prototype._interceptorBehavior;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNvdmFsZW50L2h0dHAvIiwic291cmNlcyI6WyJpbnRlcmNlcHRvcnMvaHR0cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFtRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5ILE9BQU8sRUFBRSxVQUFVLEVBQWMsTUFBTSxNQUFNLENBQUM7Ozs7QUFROUMsOENBR0M7OztJQUZDLCtDQUF1Qjs7SUFDdkIseUNBQWdCOztBQUdsQixNQUFNLE9BQU8sNEJBQTRCOzs7Ozs7SUFXdkMsWUFBb0IsU0FBbUIsRUFDbkIsdUJBQWtELEVBQzFELHlCQUFxRDtRQUY3QyxjQUFTLEdBQVQsU0FBUyxDQUFVO1FBQ25CLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBMkI7UUFYOUQseUJBQW9CLEdBQWdDLEVBQUUsQ0FBQztRQWE3RCx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFnQyxFQUFFLEVBQUU7WUFDckUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQztnQkFDN0IsV0FBVyxFQUFFLG1CQUFvQixTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBQTtnQkFDbEUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO2FBQ3BCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQWpCRCxJQUFJLG1CQUFtQjtRQUNyQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsSUFBSSxzQkFBc0I7UUFDeEIsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUM7SUFDdEMsQ0FBQztDQVlGOzs7SUFwQkMsNERBQStEOztJQVVuRCxpREFBMkI7O0lBQzNCLCtEQUEwRDs7QUFXeEUsTUFBTSxPQUFPLGFBQWMsU0FBUSxVQUFVOzs7OztJQUUzQyxZQUFvQixRQUFxQixFQUNyQixvQkFBa0Q7UUFDcEUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRkUsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQUNyQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQThCO0lBRXRFLENBQUM7Ozs7Ozs7SUFFRCxPQUFPLENBQUMsS0FBOEIsRUFBRSxHQUFZLEVBQUUsVUFRbEQsRUFBRTs7WUFDQSxZQUFZLEdBQXlCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFrQyxFQUFFLEVBQUU7WUFDbkksT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZGLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQWtDLEVBQUUsRUFBRTtZQUM1QyxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQy9ELENBQUM7Ozs7Ozs7O0lBRU8sYUFBYSxDQUFDLE1BQStCLEVBQy9CLEdBQVcsRUFDWCxPQUFtQyxFQUNuQyxZQUFrQztRQUN0RCxJQUFJO1lBQ0YsT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3ZEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLElBQUksVUFBVSxDQUFNLENBQUMsVUFBMkIsRUFBRSxFQUFFO2dCQUN6RCxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM3RixDQUFDOzs7Ozs7SUFFTyxlQUFlLENBQUMsT0FBbUMsRUFBRSxZQUFrQztRQUM3RixZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBK0IsRUFBRSxFQUFFO1lBQ3ZELElBQUksV0FBVyxDQUFDLGFBQWEsRUFBRTtnQkFDN0IsT0FBTyxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDOUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Ozs7OztJQUVPLHNCQUFzQixDQUFDLEdBQW9CLEVBQUUsWUFBa0M7UUFDckYsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQStCLEVBQUUsRUFBRTtZQUNqRSxJQUFJLFdBQVcsQ0FBQyxjQUFjLEVBQUU7Z0JBQzlCLEdBQUcsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3ZDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Q0FDRjs7O0lBckRhLGlDQUE2Qjs7SUFDN0IsNkNBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIYW5kbGVyLCBIdHRwUmVzcG9uc2UsIEh0dHBSZXF1ZXN0LCBIdHRwSGVhZGVycywgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaWJlciB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJVGRIdHRwSW50ZXJjZXB0b3IgfSBmcm9tICcuL2h0dHAtaW50ZXJjZXB0b3IuaW50ZXJmYWNlJztcbmltcG9ydCB7IElUZEh0dHBJbnRlcmNlcHRvck1hdGNoZXIgfSBmcm9tICcuL2h0dHAtaW50ZXJjZXB0b3ItbWF0Y2hlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSVRkSHR0cEludGVyY2VwdG9yTWFwcGluZyB9IGZyb20gJy4vaHR0cC1pbnRlcmNlcHRvci1tYXBwaW5nLmludGVyZmFjZSc7XG5cbmltcG9ydCB7IElUZEh0dHBSRVNUT3B0aW9uc1dpdGhCb2R5IH0gZnJvbSAnLi4vaHR0cC5pbnRlcmZhY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBJVGRIdHRwSW50ZXJjZXB0b3JDb25maWcge1xuICBpbnRlcmNlcHRvcjogVHlwZTxhbnk+O1xuICBwYXRoczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjbGFzcyBUZEludGVyY2VwdG9yQmVoYXZpb3JTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfcmVxdWVzdEludGVyY2VwdG9yczogSVRkSHR0cEludGVyY2VwdG9yTWFwcGluZ1tdID0gW107XG5cbiAgZ2V0IHJlcXVlc3RJbnRlcmNlcHRvcnMoKTogSVRkSHR0cEludGVyY2VwdG9yTWFwcGluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdEludGVyY2VwdG9ycztcbiAgfVxuXG4gIGdldCBodHRwSW50ZXJjZXB0b3JNYXRjaGVyKCk6IElUZEh0dHBJbnRlcmNlcHRvck1hdGNoZXIge1xuICAgIHJldHVybiB0aGlzLl9odHRwSW50ZXJjZXB0b3JNYXRjaGVyO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICAgICAgICAgICBwcml2YXRlIF9odHRwSW50ZXJjZXB0b3JNYXRjaGVyOiBJVGRIdHRwSW50ZXJjZXB0b3JNYXRjaGVyLFxuICAgICAgICAgICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDb25maWdzOiBJVGRIdHRwSW50ZXJjZXB0b3JDb25maWdbXSkge1xuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNvbmZpZ3MuZm9yRWFjaCgoY29uZmlnOiBJVGRIdHRwSW50ZXJjZXB0b3JDb25maWcpID0+IHtcbiAgICAgIHRoaXMuX3JlcXVlc3RJbnRlcmNlcHRvcnMucHVzaCh7XG4gICAgICAgIGludGVyY2VwdG9yOiA8SVRkSHR0cEludGVyY2VwdG9yPl9pbmplY3Rvci5nZXQoY29uZmlnLmludGVyY2VwdG9yKSxcbiAgICAgICAgcGF0aHM6IGNvbmZpZy5wYXRocyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZEh0dHBTZXJ2aWNlIGV4dGVuZHMgSHR0cENsaWVudCB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaGFuZGxlcjogSHR0cEhhbmRsZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgX2ludGVyY2VwdG9yQmVoYXZpb3I6IFRkSW50ZXJjZXB0b3JCZWhhdmlvclNlcnZpY2UpIHtcbiAgICBzdXBlcihfaGFuZGxlcik7XG4gIH1cblxuICByZXF1ZXN0KGZpcnN0OiBzdHJpbmd8SHR0cFJlcXVlc3Q8YW55PiwgdXJsPzogc3RyaW5nLCBvcHRpb25zOiB7XG4gICAgYm9keT86IGFueSxcbiAgICBoZWFkZXJzPzogSHR0cEhlYWRlcnN8e1toZWFkZXI6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdfSxcbiAgICBvYnNlcnZlPzogJ2JvZHknIHwgJ2V2ZW50cycgfCAncmVzcG9uc2UnLFxuICAgIHBhcmFtcz86IEh0dHBQYXJhbXN8e1twYXJhbTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW119LFxuICAgIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbixcbiAgICByZXNwb25zZVR5cGU/OiAnYXJyYXlidWZmZXInfCdibG9iJ3wnanNvbid8J3RleHQnLFxuICAgIHdpdGhDcmVkZW50aWFscz86IGJvb2xlYW4sXG4gIH0gPSB7fSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgbGV0IGludGVyY2VwdG9yczogSVRkSHR0cEludGVyY2VwdG9yW10gPSB0aGlzLl9pbnRlcmNlcHRvckJlaGF2aW9yLnJlcXVlc3RJbnRlcmNlcHRvcnMuZmlsdGVyKChtYXBwaW5nOiBJVGRIdHRwSW50ZXJjZXB0b3JNYXBwaW5nKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5faW50ZXJjZXB0b3JCZWhhdmlvci5odHRwSW50ZXJjZXB0b3JNYXRjaGVyLm1hdGNoZXMoe3VybDogdXJsfSwgbWFwcGluZyk7XG4gICAgfSkubWFwKChtYXBwaW5nOiBJVGRIdHRwSW50ZXJjZXB0b3JNYXBwaW5nKSA9PiB7XG4gICAgICByZXR1cm4gbWFwcGluZy5pbnRlcmNlcHRvcjtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fc2V0dXBSZXF1ZXN0KGZpcnN0LCB1cmwsIG9wdGlvbnMsIGludGVyY2VwdG9ycyk7XG4gIH1cblxuICBwcml2YXRlIF9zZXR1cFJlcXVlc3QobWV0aG9kOiBzdHJpbmd8SHR0cFJlcXVlc3Q8YW55PixcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogSVRkSHR0cFJFU1RPcHRpb25zV2l0aEJvZHksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmNlcHRvcnM6IElUZEh0dHBJbnRlcmNlcHRvcltdKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj4ge1xuICAgIHRyeSB7XG4gICAgICBvcHRpb25zID0gdGhpcy5fcmVxdWVzdFJlc29sdmUob3B0aW9ucywgaW50ZXJjZXB0b3JzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8YW55Pigoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxhbnk+KSA9PiB7XG4gICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2hhbmRsZVJlc3BvbnNlUmVzb2x2ZShzdXBlci5yZXF1ZXN0KDxhbnk+bWV0aG9kLCB1cmwsIG9wdGlvbnMpLCBpbnRlcmNlcHRvcnMpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVxdWVzdFJlc29sdmUob3B0aW9uczogSVRkSHR0cFJFU1RPcHRpb25zV2l0aEJvZHksIGludGVyY2VwdG9yczogSVRkSHR0cEludGVyY2VwdG9yW10pOiBJVGRIdHRwUkVTVE9wdGlvbnNXaXRoQm9keSB7XG4gICAgaW50ZXJjZXB0b3JzLmZvckVhY2goKGludGVyY2VwdG9yOiBJVGRIdHRwSW50ZXJjZXB0b3IpID0+IHtcbiAgICAgIGlmIChpbnRlcmNlcHRvci5oYW5kbGVPcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBpbnRlcmNlcHRvci5oYW5kbGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgcHJpdmF0ZSBfaGFuZGxlUmVzcG9uc2VSZXNvbHZlKG9iczogT2JzZXJ2YWJsZTxhbnk+LCBpbnRlcmNlcHRvcnM6IElUZEh0dHBJbnRlcmNlcHRvcltdKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpbnRlcmNlcHRvcnMucmV2ZXJzZSgpLmZvckVhY2goKGludGVyY2VwdG9yOiBJVGRIdHRwSW50ZXJjZXB0b3IpID0+IHtcbiAgICAgIGlmIChpbnRlcmNlcHRvci5oYW5kbGVSZXNwb25zZSkge1xuICAgICAgICBvYnMgPSBpbnRlcmNlcHRvci5oYW5kbGVSZXNwb25zZShvYnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYnM7XG4gIH1cbn1cbiJdfQ==