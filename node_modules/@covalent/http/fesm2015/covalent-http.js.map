{"version":3,"file":"covalent-http.js.map","sources":["ng://@covalent/http/interceptors/http.service.ts","ng://@covalent/http/actions/http.mixin.ts","ng://@covalent/http/interceptors/url-regexp-interceptor-matcher.class.ts","ng://@covalent/http/http.module.ts","ng://@covalent/http/actions/params/abstract-param.decorator.ts","ng://@covalent/http/actions/methods/abstract-method.decorator.ts","ng://@covalent/http/actions/methods/get.decorator.ts","ng://@covalent/http/actions/methods/post.decorator.ts","ng://@covalent/http/actions/methods/patch.decorator.ts","ng://@covalent/http/actions/methods/put.decorator.ts","ng://@covalent/http/actions/methods/delete.decorator.ts","ng://@covalent/http/actions/class/http.decorator.ts","ng://@covalent/http/actions/params/param.decorator.ts","ng://@covalent/http/actions/params/body.decorator.ts","ng://@covalent/http/actions/params/response.decorator.ts","ng://@covalent/http/actions/params/query-params.decorator.ts"],"sourcesContent":["import { Type, Injector } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpResponse, HttpRequest, HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { Observable, Subscriber } from 'rxjs';\n\nimport { ITdHttpInterceptor } from './http-interceptor.interface';\nimport { ITdHttpInterceptorMatcher } from './http-interceptor-matcher.interface';\nimport { ITdHttpInterceptorMapping } from './http-interceptor-mapping.interface';\n\nimport { ITdHttpRESTOptionsWithBody } from '../http.interfaces';\n\nexport interface ITdHttpInterceptorConfig {\n  interceptor: Type<any>;\n  paths: string[];\n}\n\nexport class TdInterceptorBehaviorService {\n  private _requestInterceptors: ITdHttpInterceptorMapping[] = [];\n\n  get requestInterceptors(): ITdHttpInterceptorMapping[] {\n    return this._requestInterceptors;\n  }\n\n  get httpInterceptorMatcher(): ITdHttpInterceptorMatcher {\n    return this._httpInterceptorMatcher;\n  }\n\n  constructor(private _injector: Injector,\n              private _httpInterceptorMatcher: ITdHttpInterceptorMatcher,\n              requestInterceptorConfigs: ITdHttpInterceptorConfig[]) {\n    requestInterceptorConfigs.forEach((config: ITdHttpInterceptorConfig) => {\n      this._requestInterceptors.push({\n        interceptor: <ITdHttpInterceptor>_injector.get(config.interceptor),\n        paths: config.paths,\n      });\n    });\n  }\n}\n\nexport class TdHttpService extends HttpClient {\n\n  constructor(private _handler: HttpHandler,\n              private _interceptorBehavior: TdInterceptorBehaviorService) {\n    super(_handler);\n  }\n\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body' | 'events' | 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let interceptors: ITdHttpInterceptor[] = this._interceptorBehavior.requestInterceptors.filter((mapping: ITdHttpInterceptorMapping) => {\n      return this._interceptorBehavior.httpInterceptorMatcher.matches({url: url}, mapping);\n    }).map((mapping: ITdHttpInterceptorMapping) => {\n      return mapping.interceptor;\n    });\n    return this._setupRequest(first, url, options, interceptors);\n  }\n\n  private _setupRequest(method: string|HttpRequest<any>,\n                        url: string,\n                        options: ITdHttpRESTOptionsWithBody,\n                        interceptors: ITdHttpInterceptor[]): Observable<HttpResponse<any>> {\n    try {\n      options = this._requestResolve(options, interceptors);\n    } catch (e) {\n      return new Observable<any>((subscriber: Subscriber<any>) => {\n        subscriber.error(e);\n      });\n    }\n    return this._handleResponseResolve(super.request(<any>method, url, options), interceptors);\n  }\n\n  private _requestResolve(options: ITdHttpRESTOptionsWithBody, interceptors: ITdHttpInterceptor[]): ITdHttpRESTOptionsWithBody {\n    interceptors.forEach((interceptor: ITdHttpInterceptor) => {\n      if (interceptor.handleOptions) {\n        options = interceptor.handleOptions(options);\n      }\n    });\n    return options;\n  }\n\n  private _handleResponseResolve(obs: Observable<any>, interceptors: ITdHttpInterceptor[]): Observable<any> {\n    interceptors.reverse().forEach((interceptor: ITdHttpInterceptor) => {\n      if (interceptor.handleResponse) {\n        obs = interceptor.handleResponse(obs);\n      }\n    });\n    return obs;\n  }\n}\n","import { Type, Injectable, Injector, ÉµReflectionCapabilities, InjectFlags, Optional,\n  SkipSelf, Self, Inject, InjectionToken, inject, INJECTOR } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { TdHttpService } from '../interceptors/http.service';\n\nimport { Observable } from 'rxjs';\n\nimport { ITdHttpRESTOptions, ITdHttpRESTOptionsWithBody, TdHttpRESTResponseType, TdHttpRESTObserve, TdHttpMethod } from '../http.interfaces';\n\nexport interface ITdHttpRESTConfig {\n  baseHeaders?: HttpHeaders;\n  baseUrl: string;\n  defaultObserve?: TdHttpRESTObserve;\n  defaultResponseType?: TdHttpRESTResponseType;\n}\n\ntype Constructor<T> = new (...args: any[]) => T;\n\n/**\n * DO NOT MODIFY\n * Taken from angular since they dont expose this function\n * This is used internally to inject services from the constructor of the base service using the mixinHttp\n * @internal\n */\nfunction injectArgs(types: (Type<any>| InjectionToken<any>| any[])[], injector: Injector): any[] {\n  const args: any[] = [];\n  for (let i: number = 0; i < types.length; i++) {\n    const arg: any = types[i];\n    if (arg) {\n      if (Array.isArray(arg)) {\n        if (arg.length === 0) {\n          throw new Error('Arguments array must have arguments.');\n        }\n        let type: Type<any>|undefined = undefined;\n        let flags: InjectFlags = InjectFlags.Default;\n\n        for (let j: number = 0; j < arg.length; j++) {\n          const meta: any = arg[j];\n          if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n            /* tslint:disable */\n            flags |= InjectFlags.Optional;\n          } else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n            flags |= InjectFlags.SkipSelf;\n          } else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n            flags |= InjectFlags.Self;\n          } else if (meta instanceof Inject) {\n            type = meta.token;\n          } else {\n            type = meta;\n          }\n          /* tslint:enable */\n        }\n\n        args.push(injector.get(type !, flags));\n      } else {\n        args.push(injector.get(arg));\n      }\n    }\n  }\n  return args;\n}\n\nexport function getInjector(): Injector {\n  try {\n    return inject(INJECTOR);\n  } catch (e) {\n    if (!InternalHttpService._injector) {\n      throw new Error('Please add CovalentHttpModule into your imports.');\n    }\n    return InternalHttpService._injector;\n  }\n}\n\n/** \n * Mixin to augment a service with http helpers.\n * @internal\n */\nexport function mixinHttp(base: any,\n                          config: ITdHttpRESTConfig,\n                          httpInject: Type<HttpClient | TdHttpService> = TdHttpService): Constructor<any> {\n  /**\n   * Internal class used to get an instance of Injector for internal usage plus also\n   * a way to inject services from the constructor of the underlying service\n   * @internal\n   */\n  abstract class HttpInternalClass extends base {\n    constructor(...args: any[]) {\n      super(...(args && args.length ? args : injectArgs(new ÉµReflectionCapabilities().parameters(base), getInjector())));\n      this._injector = getInjector();\n      this.buildConfig();\n    }\n    abstract buildConfig(): void;\n  }\n  /**\n   * Actuall class being returned with all the hooks for http usage\n   * @internal\n   */\n  return class extends HttpInternalClass {\n    private _baseUrl: string;\n    get baseUrl(): string {\n      return (typeof(this.basePath) === 'string' ?\n        this.basePath.replace(/\\/$/, '') : '') + this._baseUrl;\n    }\n    private _baseHeaders: HttpHeaders;\n    private _defaultObserve?: TdHttpRESTObserve;\n    private _defaultResponseType?: TdHttpRESTResponseType;\n\n    http: HttpClient | TdHttpService;\n\n    /**\n     * Method used to setup the configuration parameters and get an instance of the http service\n     */\n    buildConfig(): void {\n      this.http = this._injector.get(httpInject);\n      this._baseUrl = config && config.baseUrl ? config.baseUrl.replace(/\\/$/, '') : '';\n      this._baseHeaders = config && config.baseHeaders ? config.baseHeaders : new HttpHeaders();\n      this._defaultObserve = config && config.defaultObserve ? config.defaultObserve : 'body';\n      this._defaultResponseType = config && config.defaultResponseType ? config.defaultResponseType : 'json';\n    }\n\n    /**\n     * Method used to build the default headers using the base headers\n     */\n    buildHeaders(): HttpHeaders {\n      let headersObj: {[key: string]: any} = {};\n      this._baseHeaders.keys().forEach((key: any) => {\n        headersObj[key] = this._baseHeaders.get(key);\n      });\n      return new HttpHeaders(headersObj);\n    }\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: 'POST' | 'PUT' | 'PATCH', url: string, options?: ITdHttpRESTOptionsWithBody): Observable<HttpResponse>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: 'GET' | 'DELETE', url: string, options?: ITdHttpRESTOptions): Observable<HttpResponse>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: TdHttpMethod, url: string, options?: ITdHttpRESTOptionsWithBody): Observable<HttpResponse> {\n      return this._buildRequest(method, url, options);\n    }\n\n    /**\n     * Method used to build the request depending on the `http` service and TdHttpMethod\n     */\n    private _buildRequest(method: TdHttpMethod, url: string, options: ITdHttpRESTOptionsWithBody = {}): Observable<any> {\n      if (!options.responseType) {\n        options.responseType = this._defaultResponseType;\n      }\n      if (!options.observe) {\n        options.observe = this._defaultObserve;\n      }\n      if (!options.headers) {\n        options.headers = this.buildHeaders();\n      } else {\n        let headers: HttpHeaders = this.buildHeaders();\n        if (options.headers instanceof HttpHeaders) {\n          (<HttpHeaders>options.headers).keys().forEach((key: any) => {\n            headers = headers.set(key, (<HttpHeaders>options.headers).get(key));\n          });\n        } else {\n          for (let key in options.headers) {\n            headers = headers.set(key, <any>options.headers[key]);\n          }\n        }\n        options.headers = headers;\n      }\n      return (<TdHttpService>this.http).request(method, url, options);\n    }\n  };\n}\n\n/** \n * @internal\n * WORKAROUND until Ivy Renderer is ready\n */\n@Injectable({providedIn: 'root'})\nexport class InternalHttpService {\n\n  static _injector: Injector = undefined;\n\n  constructor(_injector: Injector) {\n    InternalHttpService._injector = _injector;\n  }\n}\n","import { ITdHttpInterceptorMapping } from './http-interceptor-mapping.interface';\nimport { ITdHttpInterceptorMatcher } from './http-interceptor-matcher.interface';\n\n/**\n * Concrete implementation for http interceptor matchers.\n * This implementation uses regex to check mapping paths vs request url.\n */\nexport class TdURLRegExpInterceptorMatcher implements ITdHttpInterceptorMatcher {\n\n  matches(options: {url: string}, mapping: ITdHttpInterceptorMapping): boolean {\n    return mapping.paths.filter((path: string) => {\n      path = path.replace(/\\*\\*/gi, '<>')\n                .replace(/\\*/gi, '[a-zA-Z0-9\\\\-_]+')\n                .replace(/<>/gi, '[a-zA-Z0-9\\\\-_\\/]*');\n      if (path) {\n        path += '(\\\\?{1}.*)?$';\n        return new RegExp(path).test(options.url);\n      }\n      return false;\n    }).length > 0;\n  }\n\n}\n","import { NgModule, ModuleWithProviders, Injector, InjectionToken, Provider } from '@angular/core';\nimport { HttpClientModule, HttpHandler } from '@angular/common/http';\n\nimport { InternalHttpService } from './actions/http.mixin';\n\nimport { TdHttpService, TdInterceptorBehaviorService, ITdHttpInterceptorConfig } from './interceptors/http.service';\nimport { TdURLRegExpInterceptorMatcher } from './interceptors/url-regexp-interceptor-matcher.class';\n\nexport const HTTP_CONFIG: InjectionToken<HttpConfig> = new InjectionToken<HttpConfig>('HTTP_CONFIG');\n\nexport type HttpConfig = {interceptors: ITdHttpInterceptorConfig[]};\n\nexport function httpFactory(handler: HttpHandler, injector: Injector, config: HttpConfig): TdHttpService {\n  return new TdHttpService(\n              handler,\n              new TdInterceptorBehaviorService(injector, new TdURLRegExpInterceptorMatcher(), config.interceptors),\n            );\n}\n\nexport const HTTP_INTERCEPTOR_PROVIDER: Provider = {\n  provide: TdHttpService,\n  useFactory: httpFactory,\n  deps: [HttpHandler, Injector, HTTP_CONFIG],\n};\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n  ],\n  providers: [\n    InternalHttpService,\n  ],\n})\nexport class CovalentHttpModule {\n\n  constructor(private _internalHttpService: InternalHttpService) {}\n\n  static forRoot(config: HttpConfig = {interceptors: []}): ModuleWithProviders {\n    return {\n      ngModule: CovalentHttpModule,\n      providers: [{\n          provide: HTTP_CONFIG,\n          useValue: config,\n        },\n        HTTP_INTERCEPTOR_PROVIDER,\n      ],\n    };\n  }\n}\n","declare const Reflect: any;\nexport type TdParamType = 'param' | 'response' | 'body' | 'queryParams';\n\nexport const tdHttpRESTParam: Symbol = Symbol('TdHttpRESTParam');\n\n/**\n * Abstract implementation of the http param decorator\n * @internal\n */\nexport function TdAbstractParam(type: TdParamType, param?: string): Function {\n  return function (target: Object, propertyKey: string | symbol, parameterIndex: number): void {\n    let parameters: { index: number, param: string, type: TdParamType }[] = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyKey) || [];\n    parameters.push({\n      index: parameterIndex,\n      param: param,\n      type: type,\n    });\n    Reflect.defineMetadata(tdHttpRESTParam, parameters, target, propertyKey);\n  };\n}\n","import { HttpParams } from '@angular/common/http';\n\nimport { TdHttpMethod, ITdHttpRESTOptions, ITdHttpRESTOptionsWithBody } from '../../http.interfaces';\nimport { TdParamType, tdHttpRESTParam } from '../params/abstract-param.decorator';\n\nimport { Observable, of } from 'rxjs';\n\ndeclare const Reflect: any;\n\nexport const NOOP_HTTP: Observable<any> = of(undefined);\n\n/**\n * Method used to copy parameters from an array or HttpParams object\n * into a centrilized HttpParams object\n * @internal\n */\nexport function parseParams(target: HttpParams, source: HttpParams | {[key: string]: string | string[]}): HttpParams {\n  let queryParams: HttpParams = target;\n  if (source instanceof HttpParams) {\n    source.keys().forEach((key: string) => {\n      // skip if value is undefined\n      if ((<HttpParams>source).get(key) !== undefined) {\n        queryParams = queryParams.set(key, (<HttpParams>source).get(key));\n      }\n    });\n  } else {\n    for (let key in source) {\n      // skip if value is undefined\n      if (<any>source[key] !== undefined) {\n        queryParams = queryParams.set(key, <any>source[key]);\n      }\n    }\n  }\n  return queryParams;\n}\n\n/**\n * Abstract implementation of the http method decorator\n * @internal\n */\nexport function TdAbstractMethod(config: {\n  method: TdHttpMethod,\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return function (target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>): any {\n    let wrappedFunction: Function = descriptor.value;\n    // replace method call with our own and proxy it\n    descriptor.value = function (): any {\n      try {\n        let replacedPath: string = config.path;\n        let parameters: { index: number, param: string, type: TdParamType }[] = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyName);\n        let newArgs: any[] = [];\n        let body: any;\n        let queryParams: HttpParams = new HttpParams();\n        if (parameters) {\n          // map parameters and see which type they are to act on them\n          for (let parameter of parameters) {\n            if (parameter.type === 'param') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              replacedPath = replacedPath.replace(':' + parameter.param, arguments[parameter.index]);\n            } else if (parameter.type === 'body') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              body = arguments[parameter.index];\n            } else if (parameter.type === 'queryParams') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              let qParams: HttpParams | {[key: string]: string | string[]} = arguments[parameter.index];\n              if (config.options && config.options.params) {\n                queryParams = parseParams(queryParams, config.options.params);\n              }\n              if (qParams) {\n                queryParams = parseParams(queryParams, qParams);\n              }\n            }\n          }\n        }\n        // tslint:disable-next-line\n        let url: string = this.baseUrl + replacedPath;\n        let options: ITdHttpRESTOptionsWithBody = Object.assign({}, config.options, {\n          body: body,\n          params: queryParams,\n        });\n        // tslint:disable-next-line\n        let request: any = this.buildRequest(config.method, url, options);\n        if (parameters) {\n          // see which one was the response parameter so we can set the request observable\n          for (let parameter of parameters) {\n            if (parameter.type === 'response') {\n              newArgs[parameter.index] = request;\n            }\n          }\n        }\n        // tslint:disable-next-line\n        let response: any = wrappedFunction.apply(this, newArgs);\n        // if the response is NOOP_HTTP or undefined, then we return the request as it is\n        // else we return the response from the inner function\n        if (response === NOOP_HTTP || response === undefined) {\n          return request;\n        } else {\n          return response;\n        }\n      } catch (error) {\n        // tslint:disable-next-line\n        console.error(error);\n      }\n    };\n  };\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds GET request capabilities to a method\n */\nexport function TdGET(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'GET',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds POST request capabilities to a method\n */\nexport function TdPOST(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'POST',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds PATCH request capabilities to a method\n */\nexport function TdPATCH(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'PATCH',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds PUT request capabilities to a method\n */\nexport function TdPUT(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'PUT',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds DELETE request capabilities to a method\n */\nexport function TdDELETE(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'DELETE',\n  }, config));\n}\n","import { HttpClient } from '@angular/common/http';\n\nimport { mixinHttp, ITdHttpRESTConfig } from '../http.mixin';\n\nimport { TdHttpService } from '../../interceptors/http.service';\n\n/**\n * Decorator used to give a service http capabilities using TdHttpService\n */\nexport function TdHttp(config: ITdHttpRESTConfig): Function {\n  return function <T extends { new(...args: any[]): {} }>(constructor: any): any {\n    return class extends mixinHttp(constructor, config, TdHttpService) {\n     \n    };\n  };\n}\n\n/**\n * Decorator used to give a service http capabilities using HttpClient\n */\nexport function TdHttpClient(config: ITdHttpRESTConfig): Function {\n  return function <T extends { new(...args: any[]): {} }>(constructor: any): any {\n    return class extends mixinHttp(constructor, config, HttpClient) {\n     \n    };\n  };\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is an http parameter in a method\n */\nexport function TdParam(param: string): Function {\n  return TdAbstractParam('param', param);\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http body in a method\n */\nexport function TdBody(): Function {\n  return TdAbstractParam('body');\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http response in a method\n */\nexport function TdResponse(): Function {\n  return TdAbstractParam('response');\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http query parameters in a method\n */\nexport function TdQueryParams(): Function {\n  return TdAbstractParam('queryParams');\n}\n"],"names":[],"mappings":";;;;;;;;AACA,MAea,4BAA4B;;;;;;IAWvC,YAAoB,SAAmB,EACnB,uBAAkD,EAC1D,yBAAqD;QAF7C,cAAS,GAAT,SAAS,CAAU;QACnB,4BAAuB,GAAvB,uBAAuB,CAA2B;QAX9D,yBAAoB,GAAgC,EAAE,CAAC;QAa7D,yBAAyB,CAAC,OAAO,CAAC,CAAC,MAAgC;YACjE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;gBAC7B,WAAW,qBAAsB,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,EAAA;gBAClE,KAAK,EAAE,MAAM,CAAC,KAAK;aACpB,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;;;;IAjBD,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,oBAAoB,CAAC;KAClC;;;;IAED,IAAI,sBAAsB;QACxB,OAAO,IAAI,CAAC,uBAAuB,CAAC;KACrC;CAYF;MAEY,aAAc,SAAQ,UAAU;;;;;IAE3C,YAAoB,QAAqB,EACrB,oBAAkD;QACpE,KAAK,CAAC,QAAQ,CAAC,CAAC;QAFE,aAAQ,GAAR,QAAQ,CAAa;QACrB,yBAAoB,GAApB,oBAAoB,CAA8B;KAErE;;;;;;;IAED,OAAO,CAAC,KAA8B,EAAE,GAAY,EAAE,UAQlD,EAAE;;YACA,YAAY,GAAyB,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,OAAkC;YAC/H,OAAO,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,EAAE,OAAO,CAAC,CAAC;SACtF,CAAC,CAAC,GAAG,CAAC,CAAC,OAAkC;YACxC,OAAO,OAAO,CAAC,WAAW,CAAC;SAC5B,CAAC;QACF,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;KAC9D;;;;;;;;IAEO,aAAa,CAAC,MAA+B,EAC/B,GAAW,EACX,OAAmC,EACnC,YAAkC;QACtD,IAAI;YACF,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;SACvD;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,IAAI,UAAU,CAAM,CAAC,UAA2B;gBACrD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACrB,CAAC,CAAC;SACJ;QACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,OAAO,oBAAM,MAAM,IAAE,GAAG,EAAE,OAAO,CAAC,EAAE,YAAY,CAAC,CAAC;KAC5F;;;;;;IAEO,eAAe,CAAC,OAAmC,EAAE,YAAkC;QAC7F,YAAY,CAAC,OAAO,CAAC,CAAC,WAA+B;YACnD,IAAI,WAAW,CAAC,aAAa,EAAE;gBAC7B,OAAO,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC9C;SACF,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;KAChB;;;;;;IAEO,sBAAsB,CAAC,GAAoB,EAAE,YAAkC;QACrF,YAAY,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,WAA+B;YAC7D,IAAI,WAAW,CAAC,cAAc,EAAE;gBAC9B,GAAG,GAAG,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;aACvC;SACF,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACZ;CACF;;;;;;AC9FD;;;;;;;;;AAwBA,SAAS,UAAU,CAAC,KAAgD,EAAE,QAAkB;;UAChF,IAAI,GAAU,EAAE;IACtB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;cACvC,GAAG,GAAQ,KAAK,CAAC,CAAC,CAAC;QACzB,IAAI,GAAG,EAAE;YACP,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACtB,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;oBACpB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACzD;;oBACG,IAAI,GAAwB,SAAS;;oBACrC,KAAK;gBAET,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;0BACrC,IAAI,GAAQ,GAAG,CAAC,CAAC,CAAC;oBACxB,IAAI,IAAI,YAAY,QAAQ,IAAI,IAAI,CAAC,cAAc,KAAK,UAAU,EAAE;;wBAElE,KAAK,qBAAyB;qBAC/B;yBAAM,IAAI,IAAI,YAAY,QAAQ,IAAI,IAAI,CAAC,cAAc,KAAK,UAAU,EAAE;wBACzE,KAAK,qBAAyB;qBAC/B;yBAAM,IAAI,IAAI,YAAY,IAAI,IAAI,IAAI,CAAC,cAAc,KAAK,MAAM,EAAE;wBACjE,KAAK,iBAAqB;qBAC3B;yBAAM,IAAI,IAAI,YAAY,MAAM,EAAE;wBACjC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;qBACnB;yBAAM;wBACL,IAAI,GAAG,IAAI,CAAC;qBACb;;iBAEF;gBAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,oBAAC,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC;aACxC;iBAAM;gBACL,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9B;SACF;KACF;IACD,OAAO,IAAI,CAAC;CACb;;;;AAED,SAAgB,WAAW;IACzB,IAAI;QACF,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;KACzB;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACrE;QACD,OAAO,mBAAmB,CAAC,SAAS,CAAC;KACtC;CACF;;;;;;;;;AAMD,SAAgB,SAAS,CAAC,IAAS,EACT,MAAyB,EACzB,aAA+C,aAAa;;;;;;;IAMpF,MAAe,iBAAkB,SAAQ,IAAI;;;;QAC3C,YAAY,GAAG,IAAW;YACxB,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,UAAU,CAAC,IAAI,uBAAuB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;YACnH,IAAI,CAAC,SAAS,GAAG,WAAW,EAAE,CAAC;YAC/B,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;KAEF;;;;;IAKD,OAAO,cAAc,iBAAiB;;;;QAEpC,IAAI,OAAO;YACT,OAAO,CAAC,QAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ;gBACxC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC;SAC1D;;;;;QAUD,WAAW;YACT,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC3C,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;YAClF,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;YAC1F,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC;YACxF,IAAI,CAAC,oBAAoB,GAAG,MAAM,IAAI,MAAM,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,GAAG,MAAM,CAAC;SACxG;;;;;QAKD,YAAY;;gBACN,UAAU,GAAyB,EAAE;YACzC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,GAAQ;gBACxC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aAC9C,CAAC,CAAC;YACH,OAAO,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;SACpC;;;;;;;;;QAMD,YAAY,CAAe,MAAoB,EAAE,GAAW,EAAE,OAAoC;YAChG,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SACjD;;;;;;;;QAKO,aAAa,CAAC,MAAoB,EAAE,GAAW,EAAE,UAAsC,EAAE;YAC/F,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;gBACzB,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC;aAClD;YACD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACpB,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;aACxC;YACD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACpB,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;aACvC;iBAAM;;oBACD,OAAO,GAAgB,IAAI,CAAC,YAAY,EAAE;gBAC9C,IAAI,OAAO,CAAC,OAAO,YAAY,WAAW,EAAE;oBAC1C,oBAAc,OAAO,CAAC,OAAO,IAAE,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,GAAQ;wBACrD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,oBAAc,OAAO,CAAC,OAAO,IAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;qBACrE,CAAC,CAAC;iBACJ;qBAAM;oBACL,KAAK,IAAI,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE;wBAC/B,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,qBAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAC,CAAC;qBACvD;iBACF;gBACD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;aAC3B;YACD,OAAO,oBAAgB,IAAI,CAAC,IAAI,IAAE,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SACjE;KACF,CAAC;CACH;;;;;AAOD,MAAa,mBAAmB;;;;IAI9B,YAAY,SAAmB;QAC7B,mBAAmB,CAAC,SAAS,GAAG,SAAS,CAAC;KAC3C;;AAJM,6BAAS,GAAa,SAAS,CAAC;;YAHxC,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;YA7KL,QAAQ;;;;;;;;;;;;ACOnC,MAAa,6BAA6B;;;;;;IAExC,OAAO,CAAC,OAAsB,EAAE,OAAkC;QAChE,OAAO,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAY;YACvC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;iBACxB,OAAO,CAAC,MAAM,EAAE,kBAAkB,CAAC;iBACnC,OAAO,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;YACjD,IAAI,IAAI,EAAE;gBACR,IAAI,IAAI,cAAc,CAAC;gBACvB,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aAC3C;YACD,OAAO,KAAK,CAAC;SACd,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KACf;CAEF;;;;;;ACtBD;AAQA,MAAa,WAAW,GAA+B,IAAI,cAAc,CAAa,aAAa,CAAC;;;;;;;AAIpG,SAAgB,WAAW,CAAC,OAAoB,EAAE,QAAkB,EAAE,MAAkB;IACtF,OAAO,IAAI,aAAa,CACZ,OAAO,EACP,IAAI,4BAA4B,CAAC,QAAQ,EAAE,IAAI,6BAA6B,EAAE,EAAE,MAAM,CAAC,YAAY,CAAC,CACrG,CAAC;CACb;;AAED,MAAa,yBAAyB,GAAa;IACjD,OAAO,EAAE,aAAa;IACtB,UAAU,EAAE,WAAW;IACvB,IAAI,EAAE,CAAC,WAAW,EAAE,QAAQ,EAAE,WAAW,CAAC;CAC3C;AAUD,MAAa,kBAAkB;;;;IAE7B,YAAoB,oBAAyC;QAAzC,yBAAoB,GAApB,oBAAoB,CAAqB;KAAI;;;;;IAEjE,OAAO,OAAO,CAAC,SAAqB,EAAC,YAAY,EAAE,EAAE,EAAC;QACpD,OAAO;YACL,QAAQ,EAAE,kBAAkB;YAC5B,SAAS,EAAE,CAAC;oBACR,OAAO,EAAE,WAAW;oBACpB,QAAQ,EAAE,MAAM;iBACjB;gBACD,yBAAyB;aAC1B;SACF,CAAC;KACH;;;YAtBF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,gBAAgB;iBACjB;gBACD,SAAS,EAAE;oBACT,mBAAmB;iBACpB;aACF;;;;YA7BQ,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA5B,MAAa,eAAe,GAAW,MAAM,CAAC,iBAAiB,CAAC;;;;;;;;AAMhE,SAAgB,eAAe,CAAC,IAAiB,EAAE,KAAc;IAC/D,OAAO,UAAU,MAAc,EAAE,WAA4B,EAAE,cAAsB;;YAC/E,UAAU,GAA0D,OAAO,CAAC,cAAc,CAAC,eAAe,EAAE,MAAM,EAAE,WAAW,CAAC,IAAI,EAAE;QAC1I,UAAU,CAAC,IAAI,CAAC;YACd,KAAK,EAAE,cAAc;YACrB,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,OAAO,CAAC,cAAc,CAAC,eAAe,EAAE,UAAU,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;KAC1E,CAAC;CACH;;;;;;ACnBD;AASA,MAAa,SAAS,GAAoB,EAAE,CAAC,SAAS,CAAC;;;;;;;;;AAOvD,SAAgB,WAAW,CAAC,MAAkB,EAAE,MAAuD;;QACjG,WAAW,GAAe,MAAM;IACpC,IAAI,MAAM,YAAY,UAAU,EAAE;QAChC,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,GAAW;;YAEhC,IAAI,oBAAa,MAAM,IAAE,GAAG,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;gBAC/C,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,oBAAa,MAAM,IAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aACnE;SACF,CAAC,CAAC;KACJ;SAAM;QACL,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;;YAEtB,IAAI,mBAAK,MAAM,CAAC,GAAG,CAAC,OAAK,SAAS,EAAE;gBAClC,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,qBAAO,MAAM,CAAC,GAAG,CAAC,GAAC,CAAC;aACtD;SACF;KACF;IACD,OAAO,WAAW,CAAC;CACpB;;;;;;;AAMD,SAAgB,gBAAgB,CAAC,MAIhC;IACC,OAAO,UAAU,MAAW,EAAE,YAAoB,EAAE,UAA6C;;YAC3F,eAAe,GAAa,UAAU,CAAC,KAAK;;QAEhD,UAAU,CAAC,KAAK,GAAG;YACjB,IAAI;;oBACE,YAAY,GAAW,MAAM,CAAC,IAAI;;oBAClC,UAAU,GAA0D,OAAO,CAAC,cAAc,CAAC,eAAe,EAAE,MAAM,EAAE,YAAY,CAAC;;oBACjI,OAAO,GAAU,EAAE;;oBACnB,IAAS;;oBACT,WAAW,GAAe,IAAI,UAAU,EAAE;gBAC9C,IAAI,UAAU,EAAE;;oBAEd,KAAK,IAAI,SAAS,IAAI,UAAU,EAAE;wBAChC,IAAI,SAAS,CAAC,IAAI,KAAK,OAAO,EAAE;4BAC9B,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4BACtD,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;yBACxF;6BAAM,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,EAAE;4BACpC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4BACtD,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;yBACnC;6BAAM,IAAI,SAAS,CAAC,IAAI,KAAK,aAAa,EAAE;4BAC3C,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;;gCAClD,OAAO,GAAoD,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC;4BACzF,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE;gCAC3C,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;6BAC/D;4BACD,IAAI,OAAO,EAAE;gCACX,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;6BACjD;yBACF;qBACF;iBACF;;;oBAEG,GAAG,GAAW,IAAI,CAAC,OAAO,GAAG,YAAY;;oBACzC,OAAO,GAA+B,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,OAAO,EAAE;oBAC1E,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,WAAW;iBACpB,CAAC;;;oBAEE,OAAO,GAAQ,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC;gBACjE,IAAI,UAAU,EAAE;;oBAEd,KAAK,IAAI,SAAS,IAAI,UAAU,EAAE;wBAChC,IAAI,SAAS,CAAC,IAAI,KAAK,UAAU,EAAE;4BACjC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;yBACpC;qBACF;iBACF;;;oBAEG,QAAQ,GAAQ,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC;;;gBAGxD,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,SAAS,EAAE;oBACpD,OAAO,OAAO,CAAC;iBAChB;qBAAM;oBACL,OAAO,QAAQ,CAAC;iBACjB;aACF;YAAC,OAAO,KAAK,EAAE;;gBAEd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACtB;SACF,CAAC;KACH,CAAC;CACH;;;;;;AC1GD;;;;;AAKA,SAAgB,KAAK,CAAC,MAGrB;IACC,OAAO,gBAAgB,oBAAM,MAAM,CAAC,MAAM,CAAC;QACzC,MAAM,EAAE,KAAK;KACd,EAAE,MAAM,CAAC,GAAC,CAAC;CACb;;;;;;ACZD;;;;;AAKA,SAAgB,MAAM,CAAC,MAGtB;IACC,OAAO,gBAAgB,oBAAM,MAAM,CAAC,MAAM,CAAC;QACzC,MAAM,EAAE,MAAM;KACf,EAAE,MAAM,CAAC,GAAC,CAAC;CACb;;;;;;ACZD;;;;;AAKA,SAAgB,OAAO,CAAC,MAGvB;IACC,OAAO,gBAAgB,oBAAM,MAAM,CAAC,MAAM,CAAC;QACzC,MAAM,EAAE,OAAO;KAChB,EAAE,MAAM,CAAC,GAAC,CAAC;CACb;;;;;;ACZD;;;;;AAKA,SAAgB,KAAK,CAAC,MAGrB;IACC,OAAO,gBAAgB,oBAAM,MAAM,CAAC,MAAM,CAAC;QACzC,MAAM,EAAE,KAAK;KACd,EAAE,MAAM,CAAC,GAAC,CAAC;CACb;;;;;;ACZD;;;;;AAKA,SAAgB,QAAQ,CAAC,MAGxB;IACC,OAAO,gBAAgB,oBAAM,MAAM,CAAC,MAAM,CAAC;QACzC,MAAM,EAAE,QAAQ;KACjB,EAAE,MAAM,CAAC,GAAC,CAAC;CACb;;;;;;ACbD;;;;;AASA,SAAgB,MAAM,CAAC,MAAyB;IAC9C,OAAO,UAAiD,WAAgB;QACtE,OAAO,cAAc,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,aAAa,CAAC;SAEjE,CAAC;KACH,CAAC;CACH;;;;;;AAKD,SAAgB,YAAY,CAAC,MAAyB;IACpD,OAAO,UAAiD,WAAgB;QACtE,OAAO,cAAc,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,CAAC;SAE9D,CAAC;KACH,CAAC;CACH;;;;;;AC1BD;;;;;AAKA,SAAgB,OAAO,CAAC,KAAa;IACnC,OAAO,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;CACxC;;;;;;ACPD;;;;AAKA,SAAgB,MAAM;IACpB,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;CAChC;;;;;;ACPD;;;;AAKA,SAAgB,UAAU;IACxB,OAAO,eAAe,CAAC,UAAU,CAAC,CAAC;CACpC;;;;;;ACPD;;;;AAKA,SAAgB,aAAa;IAC3B,OAAO,eAAe,CAAC,aAAa,CAAC,CAAC;CACvC;;;;;;;;;;;;;;;;;;;;;;;;"}
