/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
/**
 * @record
 */
export function ITdHttpInterceptorConfig() { }
if (false) {
    /** @type {?} */
    ITdHttpInterceptorConfig.prototype.interceptor;
    /** @type {?} */
    ITdHttpInterceptorConfig.prototype.paths;
}
var TdInterceptorBehaviorService = /** @class */ (function () {
    function TdInterceptorBehaviorService(_injector, _httpInterceptorMatcher, requestInterceptorConfigs) {
        var _this = this;
        this._injector = _injector;
        this._httpInterceptorMatcher = _httpInterceptorMatcher;
        this._requestInterceptors = [];
        requestInterceptorConfigs.forEach(function (config) {
            _this._requestInterceptors.push({
                interceptor: (/** @type {?} */ (_injector.get(config.interceptor))),
                paths: config.paths,
            });
        });
    }
    Object.defineProperty(TdInterceptorBehaviorService.prototype, "requestInterceptors", {
        get: /**
         * @return {?}
         */
        function () {
            return this._requestInterceptors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TdInterceptorBehaviorService.prototype, "httpInterceptorMatcher", {
        get: /**
         * @return {?}
         */
        function () {
            return this._httpInterceptorMatcher;
        },
        enumerable: true,
        configurable: true
    });
    return TdInterceptorBehaviorService;
}());
export { TdInterceptorBehaviorService };
if (false) {
    /** @type {?} */
    TdInterceptorBehaviorService.prototype._requestInterceptors;
    /** @type {?} */
    TdInterceptorBehaviorService.prototype._injector;
    /** @type {?} */
    TdInterceptorBehaviorService.prototype._httpInterceptorMatcher;
}
var TdHttpService = /** @class */ (function (_super) {
    tslib_1.__extends(TdHttpService, _super);
    function TdHttpService(_handler, _interceptorBehavior) {
        var _this = _super.call(this, _handler) || this;
        _this._handler = _handler;
        _this._interceptorBehavior = _interceptorBehavior;
        return _this;
    }
    /**
     * @param {?} first
     * @param {?=} url
     * @param {?=} options
     * @return {?}
     */
    TdHttpService.prototype.request = /**
     * @param {?} first
     * @param {?=} url
     * @param {?=} options
     * @return {?}
     */
    function (first, url, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var interceptors = this._interceptorBehavior.requestInterceptors.filter(function (mapping) {
            return _this._interceptorBehavior.httpInterceptorMatcher.matches({ url: url }, mapping);
        }).map(function (mapping) {
            return mapping.interceptor;
        });
        return this._setupRequest(first, url, options, interceptors);
    };
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @param {?} interceptors
     * @return {?}
     */
    TdHttpService.prototype._setupRequest = /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @param {?} interceptors
     * @return {?}
     */
    function (method, url, options, interceptors) {
        try {
            options = this._requestResolve(options, interceptors);
        }
        catch (e) {
            return new Observable(function (subscriber) {
                subscriber.error(e);
            });
        }
        return this._handleResponseResolve(_super.prototype.request.call(this, (/** @type {?} */ (method)), url, options), interceptors);
    };
    /**
     * @param {?} options
     * @param {?} interceptors
     * @return {?}
     */
    TdHttpService.prototype._requestResolve = /**
     * @param {?} options
     * @param {?} interceptors
     * @return {?}
     */
    function (options, interceptors) {
        interceptors.forEach(function (interceptor) {
            if (interceptor.handleOptions) {
                options = interceptor.handleOptions(options);
            }
        });
        return options;
    };
    /**
     * @param {?} obs
     * @param {?} interceptors
     * @return {?}
     */
    TdHttpService.prototype._handleResponseResolve = /**
     * @param {?} obs
     * @param {?} interceptors
     * @return {?}
     */
    function (obs, interceptors) {
        interceptors.reverse().forEach(function (interceptor) {
            if (interceptor.handleResponse) {
                obs = interceptor.handleResponse(obs);
            }
        });
        return obs;
    };
    return TdHttpService;
}(HttpClient));
export { TdHttpService };
if (false) {
    /** @type {?} */
    TdHttpService.prototype._handler;
    /** @type {?} */
    TdHttpService.prototype._interceptorBehavior;
}
//# sourceMappingURL=data:application/json;base64,