/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { NgModule, Injector, InjectionToken } from '@angular/core';
import { HttpClientModule, HttpHandler } from '@angular/common/http';
import { InternalHttpService } from './actions/http.mixin';
import { TdHttpService, TdInterceptorBehaviorService } from './interceptors/http.service';
import { TdURLRegExpInterceptorMatcher } from './interceptors/url-regexp-interceptor-matcher.class';
/** @type {?} */
export var HTTP_CONFIG = new InjectionToken('HTTP_CONFIG');
/**
 * @param {?} handler
 * @param {?} injector
 * @param {?} config
 * @return {?}
 */
export function httpFactory(handler, injector, config) {
    return new TdHttpService(handler, new TdInterceptorBehaviorService(injector, new TdURLRegExpInterceptorMatcher(), config.interceptors));
}
/** @type {?} */
export var HTTP_INTERCEPTOR_PROVIDER = {
    provide: TdHttpService,
    useFactory: httpFactory,
    deps: [HttpHandler, Injector, HTTP_CONFIG],
};
var CovalentHttpModule = /** @class */ (function () {
    function CovalentHttpModule(_internalHttpService) {
        this._internalHttpService = _internalHttpService;
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    CovalentHttpModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = { interceptors: [] }; }
        return {
            ngModule: CovalentHttpModule,
            providers: [{
                    provide: HTTP_CONFIG,
                    useValue: config,
                },
                HTTP_INTERCEPTOR_PROVIDER,
            ],
        };
    };
    CovalentHttpModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        HttpClientModule,
                    ],
                    providers: [
                        InternalHttpService,
                    ],
                },] }
    ];
    /** @nocollapse */
    CovalentHttpModule.ctorParameters = function () { return [
        { type: InternalHttpService }
    ]; };
    return CovalentHttpModule;
}());
export { CovalentHttpModule };
if (false) {
    /** @type {?} */
    CovalentHttpModule.prototype._internalHttpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY292YWxlbnQvaHR0cC8iLCJzb3VyY2VzIjpbImh0dHAubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVyRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLDRCQUE0QixFQUE0QixNQUFNLDZCQUE2QixDQUFDO0FBQ3BILE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDOztBQUVwRyxNQUFNLEtBQU8sV0FBVyxHQUErQixJQUFJLGNBQWMsQ0FBYSxhQUFhLENBQUM7Ozs7Ozs7QUFJcEcsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUFvQixFQUFFLFFBQWtCLEVBQUUsTUFBa0I7SUFDdEYsT0FBTyxJQUFJLGFBQWEsQ0FDWixPQUFPLEVBQ1AsSUFBSSw0QkFBNEIsQ0FBQyxRQUFRLEVBQUUsSUFBSSw2QkFBNkIsRUFBRSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FDckcsQ0FBQztBQUNkLENBQUM7O0FBRUQsTUFBTSxLQUFPLHlCQUF5QixHQUFhO0lBQ2pELE9BQU8sRUFBRSxhQUFhO0lBQ3RCLFVBQVUsRUFBRSxXQUFXO0lBQ3ZCLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDO0NBQzNDO0FBRUQ7SUFVRSw0QkFBb0Isb0JBQXlDO1FBQXpDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBcUI7SUFBRyxDQUFDOzs7OztJQUUxRCwwQkFBTzs7OztJQUFkLFVBQWUsTUFBdUM7UUFBdkMsdUJBQUEsRUFBQSxXQUFzQixZQUFZLEVBQUUsRUFBRSxFQUFDO1FBQ3BELE9BQU87WUFDTCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRSxDQUFDO29CQUNSLE9BQU8sRUFBRSxXQUFXO29CQUNwQixRQUFRLEVBQUUsTUFBTTtpQkFDakI7Z0JBQ0QseUJBQXlCO2FBQzFCO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQXRCRixRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLGdCQUFnQjtxQkFDakI7b0JBQ0QsU0FBUyxFQUFFO3dCQUNULG1CQUFtQjtxQkFDcEI7aUJBQ0Y7Ozs7Z0JBN0JRLG1CQUFtQjs7SUE2QzVCLHlCQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0FmWSxrQkFBa0I7OztJQUVqQixrREFBaUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0b3IsIEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSwgSHR0cEhhbmRsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IEludGVybmFsSHR0cFNlcnZpY2UgfSBmcm9tICcuL2FjdGlvbnMvaHR0cC5taXhpbic7XG5cbmltcG9ydCB7IFRkSHR0cFNlcnZpY2UsIFRkSW50ZXJjZXB0b3JCZWhhdmlvclNlcnZpY2UsIElUZEh0dHBJbnRlcmNlcHRvckNvbmZpZyB9IGZyb20gJy4vaW50ZXJjZXB0b3JzL2h0dHAuc2VydmljZSc7XG5pbXBvcnQgeyBUZFVSTFJlZ0V4cEludGVyY2VwdG9yTWF0Y2hlciB9IGZyb20gJy4vaW50ZXJjZXB0b3JzL3VybC1yZWdleHAtaW50ZXJjZXB0b3ItbWF0Y2hlci5jbGFzcyc7XG5cbmV4cG9ydCBjb25zdCBIVFRQX0NPTkZJRzogSW5qZWN0aW9uVG9rZW48SHR0cENvbmZpZz4gPSBuZXcgSW5qZWN0aW9uVG9rZW48SHR0cENvbmZpZz4oJ0hUVFBfQ09ORklHJyk7XG5cbmV4cG9ydCB0eXBlIEh0dHBDb25maWcgPSB7aW50ZXJjZXB0b3JzOiBJVGRIdHRwSW50ZXJjZXB0b3JDb25maWdbXX07XG5cbmV4cG9ydCBmdW5jdGlvbiBodHRwRmFjdG9yeShoYW5kbGVyOiBIdHRwSGFuZGxlciwgaW5qZWN0b3I6IEluamVjdG9yLCBjb25maWc6IEh0dHBDb25maWcpOiBUZEh0dHBTZXJ2aWNlIHtcbiAgcmV0dXJuIG5ldyBUZEh0dHBTZXJ2aWNlKFxuICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICBuZXcgVGRJbnRlcmNlcHRvckJlaGF2aW9yU2VydmljZShpbmplY3RvciwgbmV3IFRkVVJMUmVnRXhwSW50ZXJjZXB0b3JNYXRjaGVyKCksIGNvbmZpZy5pbnRlcmNlcHRvcnMpLFxuICAgICAgICAgICAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IEhUVFBfSU5URVJDRVBUT1JfUFJPVklERVI6IFByb3ZpZGVyID0ge1xuICBwcm92aWRlOiBUZEh0dHBTZXJ2aWNlLFxuICB1c2VGYWN0b3J5OiBodHRwRmFjdG9yeSxcbiAgZGVwczogW0h0dHBIYW5kbGVyLCBJbmplY3RvciwgSFRUUF9DT05GSUddLFxufTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIEh0dHBDbGllbnRNb2R1bGUsXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIEludGVybmFsSHR0cFNlcnZpY2UsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIENvdmFsZW50SHR0cE1vZHVsZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaW50ZXJuYWxIdHRwU2VydmljZTogSW50ZXJuYWxIdHRwU2VydmljZSkge31cblxuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IEh0dHBDb25maWcgPSB7aW50ZXJjZXB0b3JzOiBbXX0pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IENvdmFsZW50SHR0cE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW3tcbiAgICAgICAgICBwcm92aWRlOiBIVFRQX0NPTkZJRyxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLFxuICAgICAgICB9LFxuICAgICAgICBIVFRQX0lOVEVSQ0VQVE9SX1BST1ZJREVSLFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=