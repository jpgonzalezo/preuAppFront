/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, ɵReflectionCapabilities, Optional, SkipSelf, Self, Inject, inject, INJECTOR } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { TdHttpService } from '../interceptors/http.service';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function ITdHttpRESTConfig() { }
if (false) {
    /** @type {?|undefined} */
    ITdHttpRESTConfig.prototype.baseHeaders;
    /** @type {?} */
    ITdHttpRESTConfig.prototype.baseUrl;
    /** @type {?|undefined} */
    ITdHttpRESTConfig.prototype.defaultObserve;
    /** @type {?|undefined} */
    ITdHttpRESTConfig.prototype.defaultResponseType;
}
/**
 * DO NOT MODIFY
 * Taken from angular since they dont expose this function
 * This is used internally to inject services from the constructor of the base service using the mixinHttp
 * \@internal
 * @param {?} types
 * @param {?} injector
 * @return {?}
 */
function injectArgs(types, injector) {
    /** @type {?} */
    var args = [];
    for (var i = 0; i < types.length; i++) {
        /** @type {?} */
        var arg = types[i];
        if (arg) {
            if (Array.isArray(arg)) {
                if (arg.length === 0) {
                    throw new Error('Arguments array must have arguments.');
                }
                /** @type {?} */
                var type = undefined;
                /** @type {?} */
                var flags = 0 /* Default */;
                for (var j = 0; j < arg.length; j++) {
                    /** @type {?} */
                    var meta = arg[j];
                    if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {
                        /* tslint:disable */
                        flags |= 8 /* Optional */;
                    }
                    else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {
                        flags |= 4 /* SkipSelf */;
                    }
                    else if (meta instanceof Self || meta.ngMetadataName === 'Self') {
                        flags |= 2 /* Self */;
                    }
                    else if (meta instanceof Inject) {
                        type = meta.token;
                    }
                    else {
                        type = meta;
                    }
                    /* tslint:enable */
                }
                args.push(injector.get((/** @type {?} */ (type)), flags));
            }
            else {
                args.push(injector.get(arg));
            }
        }
    }
    return args;
}
/**
 * @return {?}
 */
export function getInjector() {
    try {
        return inject(INJECTOR);
    }
    catch (e) {
        if (!InternalHttpService._injector) {
            throw new Error('Please add CovalentHttpModule into your imports.');
        }
        return InternalHttpService._injector;
    }
}
/**
 * Mixin to augment a service with http helpers.
 * \@internal
 * @param {?} base
 * @param {?} config
 * @param {?=} httpInject
 * @return {?}
 */
export function mixinHttp(base, config, httpInject) {
    if (httpInject === void 0) { httpInject = TdHttpService; }
    /**
     * Internal class used to get an instance of Injector for internal usage plus also
     * a way to inject services from the constructor of the underlying service
     * \@internal
     * @abstract
     */
    var /**
     * Internal class used to get an instance of Injector for internal usage plus also
     * a way to inject services from the constructor of the underlying service
     * \@internal
     * @abstract
     */
    HttpInternalClass = /** @class */ (function (_super) {
        tslib_1.__extends(HttpInternalClass, _super);
        function HttpInternalClass() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, tslib_1.__spread((args && args.length ? args : injectArgs(new ɵReflectionCapabilities().parameters(base), getInjector())))) || this;
            _this._injector = getInjector();
            _this.buildConfig();
            return _this;
        }
        return HttpInternalClass;
    }(base));
    if (false) {
        /**
         * @abstract
         * @return {?}
         */
        HttpInternalClass.prototype.buildConfig = function () { };
    }
    /**
     * Actuall class being returned with all the hooks for http usage
     * @internal
     */
    return /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(class_1.prototype, "baseUrl", {
            get: /**
             * @return {?}
             */
            function () {
                return (typeof (this.basePath) === 'string' ?
                    this.basePath.replace(/\/$/, '') : '') + this._baseUrl;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Method used to setup the configuration parameters and get an instance of the http service
         */
        /**
         * Method used to setup the configuration parameters and get an instance of the http service
         * @return {?}
         */
        class_1.prototype.buildConfig = /**
         * Method used to setup the configuration parameters and get an instance of the http service
         * @return {?}
         */
        function () {
            this.http = this._injector.get(httpInject);
            this._baseUrl = config && config.baseUrl ? config.baseUrl.replace(/\/$/, '') : '';
            this._baseHeaders = config && config.baseHeaders ? config.baseHeaders : new HttpHeaders();
            this._defaultObserve = config && config.defaultObserve ? config.defaultObserve : 'body';
            this._defaultResponseType = config && config.defaultResponseType ? config.defaultResponseType : 'json';
        };
        /**
         * Method used to build the default headers using the base headers
         */
        /**
         * Method used to build the default headers using the base headers
         * @return {?}
         */
        class_1.prototype.buildHeaders = /**
         * Method used to build the default headers using the base headers
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var headersObj = {};
            this._baseHeaders.keys().forEach(function (key) {
                headersObj[key] = _this._baseHeaders.get(key);
            });
            return new HttpHeaders(headersObj);
        };
        /* tslint:disable-next-line */
        /* tslint:disable-next-line */
        /**
         * @template HttpResponse
         * @param {?} method
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        class_1.prototype.buildRequest = /* tslint:disable-next-line */
        /**
         * @template HttpResponse
         * @param {?} method
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        function (method, url, options) {
            return this._buildRequest(method, url, options);
        };
        /**
         * Method used to build the request depending on the `http` service and TdHttpMethod
         */
        /**
         * Method used to build the request depending on the `http` service and TdHttpMethod
         * @param {?} method
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        class_1.prototype._buildRequest = /**
         * Method used to build the request depending on the `http` service and TdHttpMethod
         * @param {?} method
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        function (method, url, options) {
            if (options === void 0) { options = {}; }
            if (!options.responseType) {
                options.responseType = this._defaultResponseType;
            }
            if (!options.observe) {
                options.observe = this._defaultObserve;
            }
            if (!options.headers) {
                options.headers = this.buildHeaders();
            }
            else {
                /** @type {?} */
                var headers_1 = this.buildHeaders();
                if (options.headers instanceof HttpHeaders) {
                    ((/** @type {?} */ (options.headers))).keys().forEach(function (key) {
                        headers_1 = headers_1.set(key, ((/** @type {?} */ (options.headers))).get(key));
                    });
                }
                else {
                    for (var key in options.headers) {
                        headers_1 = headers_1.set(key, (/** @type {?} */ (options.headers[key])));
                    }
                }
                options.headers = headers_1;
            }
            return ((/** @type {?} */ (this.http))).request(method, url, options);
        };
        return class_1;
    }(HttpInternalClass));
}
/**
 * \@internal
 * WORKAROUND until Ivy Renderer is ready
 */
var InternalHttpService = /** @class */ (function () {
    function InternalHttpService(_injector) {
        InternalHttpService._injector = _injector;
    }
    InternalHttpService._injector = undefined;
    InternalHttpService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    InternalHttpService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    /** @nocollapse */ InternalHttpService.ngInjectableDef = i0.defineInjectable({ factory: function InternalHttpService_Factory() { return new InternalHttpService(i0.inject(i0.INJECTOR)); }, token: InternalHttpService, providedIn: "root" });
    return InternalHttpService;
}());
export { InternalHttpService };
if (false) {
    /** @type {?} */
    InternalHttpService._injector;
}
//# sourceMappingURL=data:application/json;base64,