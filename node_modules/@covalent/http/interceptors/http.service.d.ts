import { Type, Injector } from '@angular/core';
import { HttpClient, HttpHandler, HttpRequest, HttpHeaders, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ITdHttpInterceptorMatcher } from './http-interceptor-matcher.interface';
import { ITdHttpInterceptorMapping } from './http-interceptor-mapping.interface';
export interface ITdHttpInterceptorConfig {
    interceptor: Type<any>;
    paths: string[];
}
export declare class TdInterceptorBehaviorService {
    private _injector;
    private _httpInterceptorMatcher;
    private _requestInterceptors;
    readonly requestInterceptors: ITdHttpInterceptorMapping[];
    readonly httpInterceptorMatcher: ITdHttpInterceptorMatcher;
    constructor(_injector: Injector, _httpInterceptorMatcher: ITdHttpInterceptorMatcher, requestInterceptorConfigs: ITdHttpInterceptorConfig[]);
}
export declare class TdHttpService extends HttpClient {
    private _handler;
    private _interceptorBehavior;
    constructor(_handler: HttpHandler, _interceptorBehavior: TdInterceptorBehaviorService);
    request(first: string | HttpRequest<any>, url?: string, options?: {
        body?: any;
        headers?: HttpHeaders | {
            [header: string]: string | string[];
        };
        observe?: 'body' | 'events' | 'response';
        params?: HttpParams | {
            [param: string]: string | string[];
        };
        reportProgress?: boolean;
        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';
        withCredentials?: boolean;
    }): Observable<any>;
    private _setupRequest;
    private _requestResolve;
    private _handleResponseResolve;
}
