{"version":3,"sources":["ng://@covalent/core/media/services/media.service.ts","ng://@covalent/core/media/directives/media-toggle.directive.ts","ng://@covalent/core/media/media.module.ts"],"names":["TdMediaService","_ngZone","_this","this","_resizing","_queryMap","Map","_querySources","_queryObservables","set","_globalSubscription","runOutsideAngular","fromEvent","window","subscribe","setTimeout","_onResize","prototype","deregisterQuery","query","get","toLowerCase","unsubscribe","run","matchMedia","matches","registerQuery","BehaviorSubject","asObservable","broadcast","this_1","_matchMediaTrigger","next","Injectable","NgZone","MEDIA_PROVIDER_FACTORY","parent","ngZone","MEDIA_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","TdMediaToggleDirective","_renderer","_elementRef","_mediaService","_matches","_attributes","_styles","_classes","Object","defineProperty","Error","_query","attributes","classes","styles","ngOnInit","_mediaChange","_subscription","ngOnDestroy","_changeAttributes","_changeClasses","_changeStyles","attr","setAttribute","nativeElement","removeAttribute","forEach","className","addClass","removeClass","style","setStyle","removeStyle","Directive","args","selector","Renderer2","ElementRef","Input","TD_MEDIA","CovalentMediaModule","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable, NgZone, SkipSelf, Optional, Provider } from '@angular/core';\nimport { Observable, BehaviorSubject, Subscription, fromEvent } from 'rxjs';\n\n@Injectable()\nexport class TdMediaService {\n\n  private _resizing: boolean = false;\n  private _globalSubscription: Subscription;\n  private _queryMap: Map<string, string> = new Map<string, string>();\n  private _querySources: { [key: string]: BehaviorSubject<boolean>} = {};\n  private _queryObservables: {[key: string]: Observable<boolean>} = {};\n\n  constructor(private _ngZone: NgZone) {\n    this._queryMap.set('xs', '(max-width: 599px)');\n    this._queryMap.set('gt-xs', '(min-width: 600px)');\n    this._queryMap.set('sm', '(min-width: 600px) and (max-width: 959px)');\n    this._queryMap.set('gt-sm', '(min-width: 960px)');\n    this._queryMap.set('md', '(min-width: 960px) and (max-width: 1279px)');\n    this._queryMap.set('gt-md', '(min-width: 1280px)');\n    this._queryMap.set('lg', '(min-width: 1280px) and (max-width: 1919px)');\n    this._queryMap.set('gt-lg', '(min-width: 1920px)');\n    this._queryMap.set('xl', '(min-width: 1920px)');\n    this._queryMap.set('landscape', '(orientation: landscape)');\n    this._queryMap.set('portrait', '(orientation: portrait)');\n    this._queryMap.set('print', 'print');\n\n    this._resizing = false;\n    // we make sure that the resize checking happend outside of Angular since it happens often\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window, 'resize').subscribe(() => {\n        // way to prevent the resize event from triggering the match media if there is already one event running already.\n        if (!this._resizing) {\n          this._resizing = true;\n          setTimeout(() => {\n            this._onResize();\n            this._resizing = false;\n          }, 100);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deregisters a query so its stops being notified or used.\n   */\n  deregisterQuery(query: string): void {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    this._querySources[query].unsubscribe();\n    delete this._querySources[query];\n    delete this._queryObservables[query];\n  }\n\n  /**\n   * Used to evaluate whether a given media query is true or false given the current device's screen / window size.\n   */\n  public query(query: string): boolean {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    return this._ngZone.run(() => {\n      return matchMedia(query).matches;\n    });\n  }\n\n  /**\n   * Registers a media query and returns an [Observable] that will re-evaluate and\n   * return if the given media query matches on window resize.\n   * Note: don't forget to unsubscribe from [Observable] when finished watching.\n   */\n  public registerQuery(query: string): Observable<boolean> {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    if (!this._querySources[query]) {\n      this._querySources[query] = new BehaviorSubject<boolean>(matchMedia(query).matches);\n      this._queryObservables[query] = this._querySources[query].asObservable();\n    }\n    return this._queryObservables[query];\n  }\n\n  /**\n   * Trigger a match media event on all subscribed observables.\n   */\n  public broadcast(): void {\n    this._onResize();\n  }\n\n  private _onResize(): void {\n    for (let query in this._querySources) {\n      this._ngZone.run(() => {\n        this._matchMediaTrigger(query);\n      });\n    }\n  }\n\n  private _matchMediaTrigger(query: string): void {\n    this._querySources[query].next(matchMedia(query).matches);\n  }\n}\n\nexport function MEDIA_PROVIDER_FACTORY(\n    parent: TdMediaService, ngZone: NgZone): TdMediaService {\n  return parent || new TdMediaService(ngZone);\n}\n\nexport const MEDIA_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdMediaService,\n  deps: [[new Optional(), new SkipSelf(), TdMediaService], NgZone],\n  useFactory: MEDIA_PROVIDER_FACTORY,\n};\n","import { Directive, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { TdMediaService } from '../services/media.service';\n\n@Directive({\n  selector: '[tdMediaToggle]',\n})\nexport class TdMediaToggleDirective implements OnInit, OnDestroy {\n\n  private _subscription: Subscription;\n\n  private _query: string;\n  private _matches: boolean = false;\n  private _attributes: {[key: string]: string} = {};\n  private _styles: {[key: string]: string} = {};\n  private _classes: string[] = [];\n\n  /**\n   * tdMediaToggle: string\n   * Media query used to evaluate screen/window size.\n   * Toggles attributes, classes and styles if media query is matched.\n   */\n  @Input('tdMediaToggle')\n  set query(query: string) {\n    if (!query) {\n      throw new Error('Query needed for [tdMediaToggle] directive.');\n    }\n    this._query = query;\n  }\n\n  /**\n   * mediaAttributes: {[key: string]: string}\n   * Attributes to be toggled when media query matches.\n   */\n  @Input('mediaAttributes')\n  set attributes(attributes: any) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * mediaClasses: string[]\n   * CSS Classes to be toggled when media query matches.\n   */\n  @Input('mediaClasses')\n  set classes(classes: string[]) {\n    this._classes = classes;\n  }\n\n  /**\n   * mediaStyles: {[key: string]: string}\n   * CSS Styles to be toggled when media query matches.\n   */\n  @Input('mediaStyles')\n  set styles(styles: any) {\n    this._styles = styles;\n  }\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef, private _mediaService: TdMediaService) { }\n\n  ngOnInit(): void {\n    this._mediaChange(this._mediaService.query(this._query));\n    this._subscription = this._mediaService.registerQuery(this._query).subscribe((matches: boolean) => {\n      this._mediaChange(matches);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  private _mediaChange(matches: boolean): void {\n    this._matches = matches;\n    this._changeAttributes();\n    this._changeClasses();\n    this._changeStyles();\n  }\n\n  private _changeAttributes(): void {\n    for (let attr in this._attributes) {\n      if (this._matches) {\n        this._renderer.setAttribute(this._elementRef.nativeElement, attr, this._attributes[attr]);\n      } else {\n        this._renderer.removeAttribute(this._elementRef.nativeElement, attr);\n      }\n    }\n  }\n\n  private _changeClasses(): void {\n    this._classes.forEach((className: string) => {\n      if (this._matches) {\n        this._renderer.addClass(this._elementRef.nativeElement, className);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, className);\n      }\n    });\n  }\n\n  private _changeStyles(): void {\n    for (let style in this._styles) {\n      if (this._matches) {\n        this._renderer.setStyle(this._elementRef.nativeElement, style, this._styles[style]);\n      } else {\n        this._renderer.removeStyle(this._elementRef.nativeElement, style);\n      }\n    }\n  }\n\n}\n","import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MEDIA_PROVIDER } from './services/media.service';\nimport { TdMediaToggleDirective } from './directives/media-toggle.directive';\n\nconst TD_MEDIA: Type<any>[] = [\n  TdMediaToggleDirective,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TD_MEDIA,\n  ],\n  exports: [\n    TD_MEDIA,\n  ],\n  providers: [\n    MEDIA_PROVIDER,\n  ],\n})\nexport class CovalentMediaModule {\n\n}\n"]}