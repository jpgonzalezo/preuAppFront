{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@covalent/core/data-table/data-table-row/data-table-row.component.ts","ng://@covalent/core/data-table/directives/data-table-template.directive.ts","ng://@covalent/core/data-table/data-table.component.ts","ng://@covalent/core/data-table/data-table-column/data-table-column.component.ts","ng://@covalent/core/data-table/data-table-cell/data-table-cell.component.ts","ng://@covalent/core/data-table/data-table-table/data-table-table.component.ts","ng://@covalent/core/data-table/services/data-table.service.ts","ng://@covalent/core/data-table/data-table.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","TdDataTableColumnRowComponent","_elementRef","_renderer","addClass","nativeElement","Component","args","selector","template","ElementRef","Renderer2","TdDataTableRowComponent","_selected","defineProperty","selected","removeClass","height","getBoundingClientRect","clickListener","focus","Input","HostListener","TdDataTableTemplateDirective","templateRef","viewContainerRef","_super","call","tslib_1.__extends","Directive","TemplateRef","ViewContainerRef","TemplatePortalDirective","Ascending","Descending","TdDataTableBase","_changeDetectorRef","_TdDataTableMixinBase","mixinControlValueAccessor","TdDataTableComponent","_document","_domSanitizer","_this","_hostWidth","_resizableColumns","_columnClientX","_onColumnResize","Subject","_widths","_onResize","_scrollHorizontalOffset","_onHorizontalScroll","_onVerticalScroll","_rowHeightCache","_totalHeight","_hostHeight","_scrollVerticalOffset","_fromRow","_toRow","_selectable","_clickable","_multiple","_allSelected","_indeterminate","_sortable","_sortOrder","TdDataTableSortingOrder","_shiftPreviouslyPressed","_lastSelectedIndex","_firstSelectedIndex","_firstCheckboxValue","_templateMap","Map","onSortChange","EventEmitter","onRowSelect","onRowClick","onSelectAll","compareWith","row","model","_resizingColumn","selectable","_offsetTransform","_data","data","Promise","resolve","then","refresh","_scrollableDiv","scrollTop","_virtualData","_columns","hasData","keys","forEach","k","find","c","name","push","label","cols","resizableColumns","coerceBooleanProperty","clickable","multiple","sortable","columnName","column","columns","Error","_sortBy","order","sortOrder","toUpperCase","length","ngOnInit","_resizeSubs","asObservable","subscribe","_rows","toArray","index","fromRow","_calculateWidths","_calculateVirtualRows","_columnResizeSubs","pipe","debounceTime","clientX","markForCheck","_horizontalScrollSubs","horizontalScroll","_verticalScrollSubs","verticalScroll","_valueChangesSubs","valueChanges","value","ngAfterContentInit","i","_templates","set","tdDataTableTemplate","ngAfterContentChecked","next","newHostWidth_1","width","setTimeout","newHostHeight","ngAfterViewInit","_rowsChangedSubs","changes","ngOnDestroy","unsubscribe","handleScroll","event","element","scrollLeft","getColumnWidth","undefined","getCellValue","nested","_getNestedValue","getTemplateRef","get","clearModel","splice","_calculateCheckboxState","selectAll","checked","toggledRows","isRowSelected","modelRow","filter","val","indexOf","emit","rows","onChange","select","currentSelected","blockEvent","mouseEvent","shiftKey","firstIndex","lastIndex","_doSelection","rowSelected","disableTextSelection","onselectstart","enableTextSelection","handleRowClick","srcElement","currentTarget","getAttribute","tagName","toLowerCase","handleSort","_rowKeyup","keyCode","ENTER","SPACE","UP_ARROW","DOWN_ARROW","_handleStartColumnDrag","_handleColumnDrag","xPosition","proposedManualWidth","_colElements","projectedWidth","_handleEndColumnDrag","preventDefault","splitName","split","rowIndex","wasSelected","_b","__values","o","m","Symbol","iterator","done","tslib_1.__values","_c","col","_adjustColumnWidth","_calculateWidth","_adjustColumnWidhts","fixedTotalWidth","flexibleWidths","hidden","limit","max","min","recalculateHostWidth","hostWidth","newValue_1","Math","floor","adjustedNumber_1","colWidth","newFlexibleWidths","skipMinWidthProjection","widthOpts","renderedColumns","scrolledRows","rowHeightSum_1","hostHeight","toRow","isFinite","offset","bypassSecurityTrustStyle","totalHeight","slice","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","inputs","changeDetection","ChangeDetectionStrategy","OnPush","Optional","type","Inject","DOCUMENT","DomSanitizer","ChangeDetectorRef","ContentChildren","ViewChild","ViewChildren","Output","TdDataTableColumnComponent","active","numeric","_columnContent","handleClick","isAscending","isDescending","read","HostBinding","TdDataTableCellComponent","_align","align","TdDataTableTableComponent","TdDataTableService","filterData","searchTerm","ignoreCase","excludedColumns","item","key","preItemValue","sortData","sortBy","from","sort","a","compA","compB","direction","Number","isNaN","parseFloat","pageData","Injectable","DATA_TABLE_PROVIDER_FACTORY","parent","DATA_TABLE_PROVIDER","deps","SkipSelf","useFactory","TD_DATA_TABLE","CovalentDataTableModule","NgModule","imports","CommonModule","MatCheckboxModule","MatTooltipModule","MatIconModule","MatPseudoCheckboxModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, Input, Output, Renderer2, ElementRef, ContentChildren, QueryList, HostListener } from '@angular/core';\n\nimport { TdDataTableCellComponent } from '../data-table-cell/data-table-cell.component';\nimport { TdDataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-column-row]',\n  styleUrls: ['./data-table-row.component.scss' ],\n  templateUrl: './data-table-row.component.html',\n})\nexport class TdDataTableColumnRowComponent {\n\n  constructor(protected _elementRef: ElementRef, protected _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column-row');\n  }\n\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-row]',\n  styleUrls: ['./data-table-row.component.scss' ],\n  templateUrl: './data-table-row.component.html',\n})\nexport class TdDataTableRowComponent {\n\n  private _selected: boolean = false;\n\n  @Input('selected')\n  set selected(selected: boolean) {\n    if (selected) {\n      this._renderer.addClass(this._elementRef.nativeElement, 'td-selected');\n    } else {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'td-selected');\n    }\n    this._selected = selected;\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  get height(): number {\n    let height: number = 48;\n    if (this._elementRef.nativeElement) {\n      height = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return height;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-row');\n  }\n\n  /**\n   * Listening to click event to explicitly focus the row element.\n   */\n  @HostListener('click')\n  clickListener(): void {\n    this.focus();\n  }\n\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({selector: '[tdDataTableTemplate]ng-template'})\nexport class TdDataTableTemplateDirective extends TemplatePortalDirective {\n\n  @Input() tdDataTableTemplate: string;\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","import { Component, Input, Output, EventEmitter, forwardRef, ChangeDetectionStrategy,\n         ChangeDetectorRef, ViewChild, OnDestroy, AfterViewInit,\n         ContentChildren, TemplateRef, AfterContentInit, QueryList, Inject,\n         Optional, ViewChildren, ElementRef, OnInit, AfterContentChecked } from '@angular/core';\nimport { DOCUMENT, DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\n\nimport { Observable, Subscription, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { TdDataTableRowComponent } from './data-table-row/data-table-row.component';\nimport { ITdDataTableSortChangeEvent, TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\nexport enum TdDataTableSortingOrder {\n  Ascending = 'ASC',\n  Descending = 'DESC',\n}\n\nexport interface ITdDataTableColumnWidth {\n  min?: number;\n  max?: number;\n}\n\nexport interface ITdDataTableColumn {\n  name: string;\n  label: string;\n  tooltip?: string;\n  numeric?: boolean;\n  format?: (value: any) => any;\n  nested?: boolean;\n  sortable?: boolean;\n  hidden?: boolean;\n  filter?: boolean;\n  width?: ITdDataTableColumnWidth | number;\n}\n\nexport interface ITdDataTableSelectEvent {\n  row: any;\n  selected: boolean;\n  index: number;\n}\n\nexport interface ITdDataTableSelectAllEvent {\n  rows: any[];\n  selected: boolean;\n}\n\nexport interface ITdDataTableRowClickEvent {\n  row: any;\n  index: number;\n}\n\nexport interface IInternalColumnWidth {\n  value: number;\n  limit: boolean;\n  index: number;\n  min?: boolean;\n  max?: boolean;\n}\n\n/**\n * Constant to set the rows offset before and after the viewport\n */\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n/**\n * Constant to set default row height if none is provided\n */\nconst TD_VIRTUAL_DEFAULT_ROW_HEIGHT: number = 48;\n\nexport class TdDataTableBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdDataTableMixinBase = mixinControlValueAccessor(TdDataTableBase, []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdDataTableComponent),\n    multi: true,\n  }],\n  selector: 'td-data-table',\n  styleUrls: ['./data-table.component.scss' ],\n  templateUrl: './data-table.component.html',\n  inputs: ['value'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdDataTableComponent extends _TdDataTableMixinBase implements IControlValueAccessor, OnInit,\n                                          AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy {\n\n  /** responsive width calculations */\n  private _resizeSubs: Subscription;\n  private _rowsChangedSubs: Subscription;\n  private _hostWidth: number = 0;\n\n  /** manually resizable columns */\n  private _resizableColumns: boolean = false;\n  private _columnClientX: number = 0;\n  private _columnResizeSubs: Subscription;\n  private _resizingColumn: number;\n  private _onColumnResize: Subject<number> = new Subject<number>();\n\n  get resizingColumn(): number {\n    return this._resizingColumn;\n  }\n\n  get hostWidth(): number {\n    // if the checkboxes are rendered, we need to remove their width\n    // from the total width to calculate properly\n    if (this.selectable) {\n      return this._hostWidth - 42;\n    }\n    return this._hostWidth;\n  }\n\n  private _widths: IInternalColumnWidth[] = [];\n  private _onResize: Subject<void> = new Subject<void>();\n\n  /** column header reposition and viewpoort */\n  private _verticalScrollSubs: Subscription;\n  private _horizontalScrollSubs: Subscription;\n  private _scrollHorizontalOffset: number = 0;\n\n  private _onHorizontalScroll: Subject<number> = new Subject<number>();\n  private _onVerticalScroll: Subject<number> = new Subject<number>();\n\n  // Array of cached row heights to allow dynamic row heights\n  private _rowHeightCache: number[] = [];\n  // Total pseudo height of all the elements\n  private _totalHeight: number = 0;\n  // Total host height for the viewport\n  private _hostHeight: number = 0;\n  // Scrolled vertical pixels\n  private _scrollVerticalOffset: number = 0;\n  // Style to move the content a certain offset depending on scrolled offset\n  private _offsetTransform: SafeStyle;\n\n  // Variables that set from and to which rows will be rendered\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  /**\n   * Returns the offset style with a proper calculation on how much it should move\n   * over the y axis of the total height\n   */\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  /**\n   * Returns the assumed total height of the rows\n   */\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  /**\n   * Returns the initial row to render in the viewport\n   */\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  /**\n   * Returns the last row to render in the viewport\n   */\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  private _valueChangesSubs: Subscription;\n  /** internal attributes */\n  private _data: any[];\n  // data virtually iterated by component\n  private _virtualData: any[];\n  private _columns: ITdDataTableColumn[];\n  private _selectable: boolean = false;\n  private _clickable: boolean = false;\n  private _multiple: boolean = true;\n  private _allSelected: boolean = false;\n  private _indeterminate: boolean = false;\n\n  /** sorting */\n  private _sortable: boolean = false;\n  private _sortBy: ITdDataTableColumn;\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  /** shift select */\n  private _shiftPreviouslyPressed: boolean = false;\n  private _lastSelectedIndex: number = -1;\n  private _firstSelectedIndex: number = -1;\n  private _firstCheckboxValue: boolean = false;\n\n  /** template fetching support */\n  private _templateMap: Map<string, TemplateRef<any>> = new Map<string, TemplateRef<any>>();\n  @ContentChildren(TdDataTableTemplateDirective) _templates: QueryList<TdDataTableTemplateDirective>;\n\n  @ViewChild('scrollableDiv') _scrollableDiv: ElementRef;\n\n  @ViewChildren('columnElement') _colElements: QueryList<TdDataTableColumnComponent>;\n\n  @ViewChildren(TdDataTableRowComponent) _rows: QueryList<TdDataTableRowComponent>;\n\n  /**\n   * Returns scroll position to reposition column headers\n   */\n  get columnsLeftScroll(): number {\n    return this._scrollHorizontalOffset * -1;\n  }\n\n  /**\n   * Returns true if all values are selected.\n   */\n  get allSelected(): boolean {\n    return this._allSelected;\n  }\n\n  /**\n   * Returns true if all values are not deselected\n   * and at least one is.\n   */\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n\n  /**\n   * data?: {[key: string]: any}[]\n   * Sets the data to be rendered as rows.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    this._rowHeightCache = [];\n    Promise.resolve().then(() => {\n      this.refresh();\n      // scroll back to the top if the data has changed\n      this._scrollableDiv.nativeElement.scrollTop = 0;\n    });\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  /**\n   * columns?: ITdDataTableColumn[]\n   * Sets additional column configuration. [ITdDataTableColumn.name] has to exist in [data] as key.\n   * Defaults to [data] keys.\n   */\n  @Input('columns')\n  set columns(cols: ITdDataTableColumn[]) {\n    this._columns = cols;\n  }\n  get columns(): ITdDataTableColumn[] {\n    if (this._columns) {\n      return this._columns;\n    }\n\n    if (this.hasData) {\n      this._columns = [];\n      // if columns is undefined, use key in [data] rows as name and label for column headers.\n      let row: any = this._data[0];\n      Object.keys(row).forEach((k: string) => {\n        if (!this._columns.find((c: any) => c.name === k)) {\n          this._columns.push({ name: k, label: k });\n        }\n      });\n      return this._columns;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * resizableColumns?: boolean\n   * Enables manual column resize.\n   * Defaults to 'false'\n   */\n  @Input('resizableColumns')\n  set resizableColumns(resizableColumns: boolean) {\n    this._resizableColumns = coerceBooleanProperty(resizableColumns);\n  }\n  get resizableColumns(): boolean {\n    return this._resizableColumns;\n  }\n\n  /**\n   * selectable?: boolean\n   * Enables row selection events, hover and selected row states.\n   * Defaults to 'false'\n   */\n  @Input('selectable')\n  set selectable(selectable: boolean) {\n    this._selectable = coerceBooleanProperty(selectable);\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n\n  /**\n   * clickable?: boolean\n   * Enables row click events, hover.\n   * Defaults to 'false'\n   */\n  @Input('clickable')\n  set clickable(clickable: boolean) {\n    this._clickable = coerceBooleanProperty(clickable);\n  }\n  get clickable(): boolean {\n    return this._clickable;\n  }\n\n  /**\n   * multiple?: boolean\n   * Enables multiple row selection. [selectable] needs to be enabled.\n   * Defaults to 'false'\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable')\n  set sortable(sortable: boolean) {\n    this._sortable = coerceBooleanProperty(sortable);\n  }\n  get sortable(): boolean {\n    return this._sortable;\n  }\n\n  /**\n   * sortBy?: string\n   * Sets the active sort column. [sortable] needs to be enabled.\n   */\n  @Input('sortBy')\n  set sortBy(columnName: string) {\n    if (!columnName) {\n      return;\n    }\n    const column: ITdDataTableColumn = this.columns.find((c: any) => c.name === columnName);\n    if (!column) {\n      throw new Error('[sortBy] must be a valid column name');\n    }\n\n    this._sortBy = column;\n  }\n  get sortByColumn(): ITdDataTableColumn {\n    return this._sortBy;\n  }\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of the [sortBy] column. [sortable] needs to be enabled.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n  get sortOrderEnum(): TdDataTableSortingOrder {\n    return this._sortOrder;\n  }\n\n  get hasData(): boolean {\n    return this._data && this._data.length > 0;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                                      new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  /**\n   * rowSelect?: function\n   * Event emitted when a row is selected/deselected. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectEvent] implemented object.\n   */\n  @Output('rowSelect') onRowSelect: EventEmitter<ITdDataTableSelectEvent> = new EventEmitter<ITdDataTableSelectEvent>();\n\n  /**\n   * rowClick?: function\n   * Event emitted when a row is clicked.\n   * Emits an [ITdDataTableRowClickEvent] implemented object.\n   */\n  @Output('rowClick') onRowClick: EventEmitter<ITdDataTableRowClickEvent> = new EventEmitter<ITdDataTableRowClickEvent>();\n\n  /**\n   * selectAll?: function\n   * Event emitted when all rows are selected/deselected by the all checkbox. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectAllEvent] implemented object.\n   */\n  @Output('selectAll') onSelectAll: EventEmitter<ITdDataTableSelectAllEvent> =\n                                    new EventEmitter<ITdDataTableSelectAllEvent>();\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * compareWith?: function(row, model): boolean\n   * Allows custom comparison between row and model to see if row is selected or not\n   * Default comparation is by reference\n   */\n  @Input('compareWith') compareWith: (row: any, model: any) => boolean = (row: any, model: any) => {\n    return row === model;\n  }\n\n  /**\n   * Initialize observable for resize and scroll events\n   */\n  ngOnInit(): void {\n    // initialize observable for resize calculations\n    this._resizeSubs = this._onResize.asObservable().subscribe(() => {\n      if (this._rows) {\n        this._rows.toArray().forEach((row: TdDataTableRowComponent, index: number) => {\n          this._rowHeightCache[this.fromRow + index] = row.height + 1;\n        });\n      }\n      this._calculateWidths();\n      this._calculateVirtualRows();\n    });\n\n    // initialize observable for column resize calculations\n    this._columnResizeSubs = this._onColumnResize.asObservable().pipe(\n      debounceTime(0),\n    ).subscribe((clientX: number) => {\n      this._columnClientX = clientX;\n      this._calculateWidths();\n      this._changeDetectorRef.markForCheck();\n    });\n    // initialize observable for scroll column header reposition\n    this._horizontalScrollSubs = this._onHorizontalScroll.asObservable()\n      .subscribe((horizontalScroll: number) => {\n      this._scrollHorizontalOffset = horizontalScroll;\n      this._changeDetectorRef.markForCheck();\n    });\n    // initialize observable for virtual scroll rendering\n    this._verticalScrollSubs = this._onVerticalScroll.asObservable()\n      .subscribe((verticalScroll: number) => {\n      this._scrollVerticalOffset = verticalScroll;\n      this._calculateVirtualRows();\n      this._changeDetectorRef.markForCheck();\n    });\n    this._valueChangesSubs = this.valueChanges.subscribe((value: any) => {\n      this.refresh();\n    });\n  }\n\n  /**\n   * Loads templates and sets them in a map for faster access.\n   */\n  ngAfterContentInit(): void {\n    for (let i: number = 0; i < this._templates.toArray().length; i++) {\n      this._templateMap.set(\n        this._templates.toArray()[i].tdDataTableTemplate,\n        this._templates.toArray()[i].templateRef,\n      );\n    }\n  }\n\n  /**\n   * Checks hosts native elements widths to see if it has changed (resize check)\n   */\n  ngAfterContentChecked(): void {\n    // check if the scroll has been reset when element is hidden\n    if (this._scrollVerticalOffset - this._scrollableDiv.nativeElement.scrollTop > 5) {\n      // scroll back to the top if element has been reset\n      this._onVerticalScroll.next(0);\n    }\n    if (this._elementRef.nativeElement) {\n      let newHostWidth: number = this._elementRef.nativeElement.getBoundingClientRect().width;\n      // if the width has changed then we throw a resize event.\n      if (this._hostWidth !== newHostWidth) {\n        setTimeout(() => {\n          this._hostWidth = newHostWidth;\n          this._onResize.next();\n        }, 0);\n      }\n    }\n    if (this._scrollableDiv.nativeElement) {\n      let newHostHeight: number = this._scrollableDiv.nativeElement.getBoundingClientRect().height;\n      // if the height of the viewport has changed, then we mark for check\n      if (this._hostHeight !== newHostHeight) {\n        this._hostHeight = newHostHeight;\n        this._calculateVirtualRows();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Registers to an observable that checks if all rows have been rendered\n   * so we can start calculating the widths\n   */\n  ngAfterViewInit(): void {\n    this._rowsChangedSubs = this._rows.changes.pipe(\n      debounceTime(0),\n    ).subscribe(() => {\n      this._onResize.next();\n    });\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Unsubscribes observables when data table is destroyed\n   */\n  ngOnDestroy(): void {\n    if (this._resizeSubs) {\n      this._resizeSubs.unsubscribe();\n    }\n    if (this._columnResizeSubs) {\n      this._columnResizeSubs.unsubscribe();\n    }\n    if (this._horizontalScrollSubs) {\n      this._horizontalScrollSubs.unsubscribe();\n    }\n    if (this._verticalScrollSubs) {\n      this._verticalScrollSubs.unsubscribe();\n    }\n    if (this._rowsChangedSubs) {\n      this._rowsChangedSubs.unsubscribe();\n    }\n    if (this._valueChangesSubs) {\n      this._valueChangesSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * Method that gets executed every time there is a scroll event\n   * Calls the scroll observable\n   */\n  handleScroll(event: Event): void {\n    let element: HTMLElement = (<HTMLElement>event.target);\n    if (element) {\n      let horizontalScroll: number = element.scrollLeft;\n      if (this._scrollHorizontalOffset !== horizontalScroll) {\n        this._onHorizontalScroll.next(horizontalScroll);\n      }\n      let verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._onVerticalScroll.next(verticalScroll);\n      }\n    }\n  }\n\n  /**\n   * Returns the width needed for the columns via index\n   */\n  getColumnWidth(index: number): number {\n    if (this._widths[index]) {\n      return this._widths[index].value;\n    }\n    return undefined;\n  }\n\n  getCellValue(column: ITdDataTableColumn, value: any): string {\n    if (column.nested === undefined || column.nested) {\n      return this._getNestedValue(column.name, value);\n    }\n    return value[column.name];\n  }\n\n  /**\n   * Getter method for template references\n   */\n   getTemplateRef(name: string): TemplateRef<any> {\n     return this._templateMap.get(name);\n   }\n\n  /**\n   * Clears model (ngModel) of component by removing all values in array.\n   */\n  clearModel(): void {\n    this.value.splice(0, this.value.length);\n  }\n\n  /**\n   * Refreshes data table and rerenders [data] and [columns]\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n    this._calculateWidths();\n    this._calculateCheckboxState();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Selects or clears all rows depending on 'checked' value.\n   */\n  selectAll(checked: boolean): void {\n    let toggledRows: any[] = [];\n    if (checked) {\n      this._data.forEach((row: any) => {\n        // skiping already selected rows\n        if (!this.isRowSelected(row)) {\n          this.value.push(row);\n          // checking which ones are being toggled\n          toggledRows.push(row);\n        }\n      });\n      this._allSelected = true;\n      this._indeterminate = true;\n    } else {\n      this._data.forEach((row: any) => {\n        // checking which ones are being toggled\n        if (this.isRowSelected(row)) {\n          toggledRows.push(row);\n          let modelRow: any = this.value.filter((val: any) => {\n            return this.compareWith(row, val);\n          })[0];\n          let index: number = this.value.indexOf(modelRow);\n          if (index > -1) {\n            this.value.splice(index, 1);\n          }\n        }\n      });\n      this._allSelected = false;\n      this._indeterminate = false;\n    }\n    this.onSelectAll.emit({rows: toggledRows, selected: checked});\n    this.onChange(this.value);\n  }\n\n  /**\n   * Checks if row is selected\n   */\n  isRowSelected(row: any): boolean {\n    // compare items by [compareWith] function\n    return this.value ? this.value.filter((val: any) => {\n      return this.compareWith(row, val);\n    }).length > 0 : false;\n  }\n\n  /**\n   * Selects or clears a row depending on 'checked' value if the row 'isSelectable'\n   * handles cntrl clicks and shift clicks for multi-select\n   */\n  select(row: any, event: Event, currentSelected: number): void {\n    if (this.selectable) {\n      this.blockEvent(event);\n      // Check to see if Shift key is selected and need to select everything in between\n      let mouseEvent: MouseEvent = event as MouseEvent;\n      if (this.multiple && mouseEvent && mouseEvent.shiftKey && this._lastSelectedIndex > -1) {\n        let firstIndex: number = currentSelected;\n        let lastIndex: number = this._lastSelectedIndex;\n        if (currentSelected > this._lastSelectedIndex) {\n          firstIndex = this._lastSelectedIndex;\n          lastIndex = currentSelected;\n        }\n        // if clicking a checkbox behind the initial check, then toggle all selections expect the initial checkbox\n        // else the checkboxes clicked are all after the initial one\n        if ((this._firstSelectedIndex >= currentSelected && this._lastSelectedIndex > this._firstSelectedIndex) ||\n           (this._firstSelectedIndex <= currentSelected && this._lastSelectedIndex < this._firstSelectedIndex)) {\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            if (this._firstSelectedIndex !== i) {\n              this._doSelection(this._data[i], i);\n            }\n          }\n        } else if ((this._firstSelectedIndex > currentSelected) || (this._firstSelectedIndex < currentSelected)) {\n          // change indexes depending on where the next checkbox is selected (before or after)\n          if (this._firstSelectedIndex > currentSelected) {\n            lastIndex--;\n          } else if (this._firstSelectedIndex < currentSelected) {\n            firstIndex++;\n          }\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            let rowSelected: boolean = this.isRowSelected(this._data[i]);\n            // if row is selected and first checkbox was selected\n            // or if row was unselected and first checkbox was unselected\n            // we ignore the toggle\n            if ((this._firstCheckboxValue && !rowSelected) ||\n                (!this._firstCheckboxValue && rowSelected)) {\n              this._doSelection(this._data[i], i);\n            } else if (this._shiftPreviouslyPressed) {\n              // else if the checkbox selected was in the middle of the last selection and the first selection\n              // then we undo the selections\n              if ((currentSelected >= this._firstSelectedIndex && currentSelected <= this._lastSelectedIndex) ||\n                  (currentSelected <= this._firstSelectedIndex && currentSelected >= this._lastSelectedIndex)) {\n                this._doSelection(this._data[i], i);\n              }\n            }\n          }\n        }\n        this._shiftPreviouslyPressed = true;\n      // if shift wasnt pressed, then we take the element checked as the first row\n      // incase the next click uses shift\n      } else if (mouseEvent && !mouseEvent.shiftKey) {\n        this._firstCheckboxValue = this._doSelection(row, currentSelected);\n        this._shiftPreviouslyPressed = false;\n        this._firstSelectedIndex = currentSelected;\n      }\n      this._lastSelectedIndex = currentSelected;\n    }\n  }\n\n  /**\n   * Overrides the onselectstart method of the document so other text on the page\n   * doesn't get selected when doing shift selections.\n   */\n  disableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = function(): boolean {\n        return false;\n      };\n    }\n  }\n\n  /**\n   * Resets the original onselectstart method.\n   */\n  enableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = undefined;\n    }\n  }\n\n  /**\n   * emits the onRowClickEvent when a row is clicked\n   * if clickable is true and selectable is false then select the row\n   */\n  handleRowClick(row: any, index: number, event: Event): void {\n    if (this.clickable) {\n      // ignoring linting rules here because attribute it actually null or not there\n      // can't check for undefined\n      const srcElement: any = event.srcElement || event.currentTarget;\n      let element: HTMLElement = event.target as HTMLElement;\n      /* tslint:disable-next-line */\n      if (srcElement.getAttribute('stopRowClick') === null && element.tagName.toLowerCase() !== 'mat-pseudo-checkbox') {\n        this.onRowClick.emit({\n          row: row,\n          index: index,\n        });\n      }\n    }\n  }\n\n  /**\n   * Method handle for sort click event in column headers.\n   */\n  handleSort(column: ITdDataTableColumn): void {\n    if (this._sortBy === column) {\n      this._sortOrder = this._sortOrder === TdDataTableSortingOrder.Ascending ?\n        TdDataTableSortingOrder.Descending : TdDataTableSortingOrder.Ascending;\n    } else {\n      this._sortBy = column;\n      this._sortOrder = TdDataTableSortingOrder.Ascending;\n    }\n    this.onSortChange.next({ name: this._sortBy.name, order: this._sortOrder });\n  }\n\n  /**\n   * Handle all keyup events when focusing a data table row\n   */\n  _rowKeyup(event: KeyboardEvent, row: any, index: number): void {\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        /** if user presses enter or space, the row should be selected */\n        if (this.selectable) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case UP_ARROW:\n        /**\n         * if users presses the up arrow, we focus the prev row\n         * unless its the first row\n         */\n        if (index > 0) {\n          this._rows.toArray()[index - 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index >= 0) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case DOWN_ARROW:\n        /**\n         * if users presses the down arrow, we focus the next row\n         * unless its the last row\n         */\n        if (index < (this._rows.toArray().length - 1)) {\n          this._rows.toArray()[index + 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index < this._data.length) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Sets column index of the dragged column and initial clientX of column\n   */\n  _handleStartColumnDrag(index: number, event: MouseEvent): void {\n    this._columnClientX = event.clientX;\n    this._resizingColumn = index;\n  }\n\n  /**\n   * Calculates new width depending on new clientX of dragger column\n   */\n  _handleColumnDrag(event: MouseEvent | DragEvent): void {\n    // check if there was been a separator clicked for resize\n    if (this._resizingColumn !== undefined && event.clientX > 0) {\n      let xPosition: number = event.clientX;\n      // checks if the separator is being moved to try and resize the column, else dont do anything\n      if (xPosition > 0 && this._columnClientX > 0 && (xPosition - this._columnClientX) !== 0) {\n        // calculate the new width depending if making the column bigger or smaller\n        let proposedManualWidth: number = this._widths[this._resizingColumn].value + (xPosition - this._columnClientX);\n        // if the proposed new width is less than the projected min width of the column, use projected min width\n        if (proposedManualWidth < this._colElements.toArray()[this._resizingColumn].projectedWidth) {\n          proposedManualWidth = this._colElements.toArray()[this._resizingColumn].projectedWidth;\n        }\n        this.columns[this._resizingColumn].width = proposedManualWidth;\n        // update new x position for the resized column\n        this._onColumnResize.next(xPosition);\n      }\n    }\n  }\n\n  /**\n   * Ends dragged flags\n   */\n  _handleEndColumnDrag(): void {\n    this._columnClientX = undefined;\n    this._resizingColumn = undefined;\n  }\n\n  /**\n   * Method to prevent the default events\n   */\n  blockEvent(event: Event): void {\n    event.preventDefault();\n  }\n\n  private _getNestedValue(name: string, value: any): string {\n    if (!(value instanceof Object) || !name) {\n      return value;\n    }\n    if (name.indexOf('.') > -1) {\n      let splitName: string[] = name.split(/\\.(.+)/, 2);\n      return this._getNestedValue(splitName[1], value[splitName[0]]);\n    } else {\n      return value[name];\n    }\n  }\n\n  /**\n   * Does the actual Row Selection\n   */\n  private _doSelection(row: any, rowIndex: number): boolean {\n    let wasSelected: boolean = this.isRowSelected(row);\n    if (!wasSelected) {\n      if (!this._multiple) {\n        this.clearModel();\n      }\n      this.value.push(row);\n    } else {\n      // compare items by [compareWith] function\n      row = this.value.filter((val: any) => {\n        return this.compareWith(row, val);\n      })[0];\n      let index: number = this.value.indexOf(row);\n      if (index > -1) {\n        this.value.splice(index, 1);\n      }\n    }\n    this._calculateCheckboxState();\n    this.onRowSelect.emit({row: row, index: rowIndex, selected: !wasSelected});\n    this.onChange(this.value);\n    return !wasSelected;\n  }\n\n  /**\n   * Calculate all the state of all checkboxes\n   */\n  private _calculateCheckboxState(): void {\n    if (this._data) {\n      this._allSelected = typeof this._data.find((d: any) => !this.isRowSelected(d)) === 'undefined';\n      this._indeterminate = false;\n      for (let row of this._data) {\n        if (!this.isRowSelected(row)) {\n          continue;\n        }\n        this._indeterminate = true;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Calculates the widths for columns and cells depending on content\n   */\n  private _calculateWidths(): void {\n    if (this._colElements && this._colElements.length) {\n      this._widths = [];\n      this._colElements.forEach((col: TdDataTableColumnComponent, index: number) => {\n        this._adjustColumnWidth(index, this._calculateWidth());\n      });\n      this._adjustColumnWidhts();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Adjusts columns after calculation to see if they need to be recalculated.\n   */\n  private _adjustColumnWidhts(): void {\n    let fixedTotalWidth: number = 0;\n    // get the number of total columns that have flexible widths (not fixed or hidden)\n    let flexibleWidths: number = this._widths.filter((width: IInternalColumnWidth, index: number) => {\n      if (this.columns[index].hidden) {\n        return false;\n      }\n      if (width.limit || width.max || width.min) {\n        fixedTotalWidth += width.value;\n      }\n      return !width.limit && !width.max && !width.min;\n    }).length;\n    // calculate how much pixes are left that could be spread across\n    // the flexible columns\n    let recalculateHostWidth: number = 0;\n    if (fixedTotalWidth < this.hostWidth) {\n      recalculateHostWidth = this.hostWidth - fixedTotalWidth;\n    }\n    // if we have flexible columns and pixels to spare on them\n    // we try and spread the pixels across them\n    if (flexibleWidths && recalculateHostWidth) {\n      let newValue: number = Math.floor(recalculateHostWidth / flexibleWidths);\n      let adjustedNumber: number = 0;\n      // adjust the column widths with the spread pixels\n      this._widths.forEach((colWidth: IInternalColumnWidth) => {\n        if (this._widths[colWidth.index].max && this._widths[colWidth.index].value > newValue ||\n            this._widths[colWidth.index].min && this._widths[colWidth.index].value < newValue ||\n            !this._widths[colWidth.index].limit) {\n          this._adjustColumnWidth(colWidth.index, newValue);\n          adjustedNumber++;\n        }\n      });\n      // if there are still columns that need to be recalculated, we start over\n      let newFlexibleWidths: number = this._widths.filter((width: IInternalColumnWidth) => {\n        return !width.limit && !width.max;\n      }).length;\n      if (newFlexibleWidths !== adjustedNumber && newFlexibleWidths !== flexibleWidths) {\n        this._adjustColumnWidhts();\n      }\n    }\n  }\n\n  /**\n   * Adjusts a single column to see if it can be recalculated\n   */\n  private _adjustColumnWidth(index: number, value: number): void {\n    this._widths[index] = {\n      value: value,\n      index: index,\n      limit: false,\n      min: false,\n      max: false,\n    };\n    // flag to see if we need to skip the min width projection\n    // depending if a width or min width has been provided\n    let skipMinWidthProjection: boolean = false;\n    if (this.columns[index]) {\n      // if the provided width has min/max, then we check to see if we need to set it\n      if (typeof this.columns[index].width === 'object') {\n        let widthOpts: ITdDataTableColumnWidth = <ITdDataTableColumnWidth>this.columns[index].width;\n        // if the column width is less than the configured min, we override it\n        skipMinWidthProjection = (widthOpts && !!widthOpts.min);\n        if (widthOpts && widthOpts.min >= this._widths[index].value) {\n          this._widths[index].value = widthOpts.min;\n          this._widths[index].min = true;\n        // if the column width is more than the configured max, we override it\n        } else if (widthOpts && widthOpts.max <= this._widths[index].value) {\n          this._widths[index].value = widthOpts.max;\n          this._widths[index].max = true;\n        }\n      // if it has a fixed width, then we just set it\n      } else if (typeof this.columns[index].width === 'number') {\n        this._widths[index].value = <number>this.columns[index].width;\n        skipMinWidthProjection = this._widths[index].limit = true;\n      }\n    }\n    // if there wasn't any width or min width provided, we set a min to what the column width min should be\n    if (!skipMinWidthProjection &&\n        this._widths[index].value < this._colElements.toArray()[index].projectedWidth) {\n      this._widths[index].value = this._colElements.toArray()[index].projectedWidth;\n      this._widths[index].min = true;\n      this._widths[index].limit = false;\n    }\n  }\n\n  /**\n   * Generic method to calculate column width\n   */\n  private _calculateWidth(): number {\n    let renderedColumns: ITdDataTableColumn[] = this.columns.filter((col: ITdDataTableColumn) => !col.hidden);\n    return Math.floor(this.hostWidth / renderedColumns.length);\n  }\n\n  /**\n   * Method to calculate the rows to be rendered in the viewport\n   */\n  private _calculateVirtualRows(): void {\n    let scrolledRows: number = 0;\n    if (this._data) {\n      this._totalHeight = 0;\n      let rowHeightSum: number = 0;\n      // loop through all rows to see if we have their height cached\n      // and sum them all to calculate the total height\n      this._data.forEach((d: any, i: number) => {\n        // iterate through all rows at first and assume all\n        // rows are the same height as the first one\n        if (!this._rowHeightCache[i]) {\n          this._rowHeightCache[i] = this._rowHeightCache[0] || TD_VIRTUAL_DEFAULT_ROW_HEIGHT;\n        }\n        rowHeightSum += this._rowHeightCache[i];\n        // check how many rows have been scrolled\n        if (this._scrollVerticalOffset - rowHeightSum > 0) {\n          scrolledRows++;\n        }\n      });\n      this._totalHeight = rowHeightSum;\n      // set the initial row to be rendered taking into account the row offset\n      let fromRow: number = scrolledRows - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n\n      let hostHeight: number = this._hostHeight;\n      let index: number = 0;\n      // calculate how many rows can fit in the viewport\n      while (hostHeight > 0) {\n        hostHeight -= this._rowHeightCache[this.fromRow + index];\n        index++;\n      }\n      // set the last row to be rendered taking into account the row offset\n      let range: number = (index - 1) + (TD_VIRTUAL_OFFSET * 2);\n      let toRow: number = range + this.fromRow;\n      // if last row is greater than the total length, then we use the total length\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    // calculate the proper offset depending on how many rows have been scrolled\n    if (scrolledRows > TD_VIRTUAL_OFFSET) {\n      for (let index: number = 0; index < this.fromRow; index++) {\n        offset += this._rowHeightCache[index];\n      }\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle('translateY(' + (offset - this.totalHeight) + 'px)');\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n","import { Component, Input, Output, EventEmitter, Renderer2, ElementRef, HostBinding, HostListener, ViewChild } from '@angular/core';\n\nimport { TdDataTableSortingOrder } from '../data-table.component';\n\nexport interface ITdDataTableSortChangeEvent {\n  order: TdDataTableSortingOrder;\n  name: string;\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'th[td-data-table-column]',\n  styleUrls: ['./data-table-column.component.scss' ],\n  templateUrl: './data-table-column.component.html',\n})\nexport class TdDataTableColumnComponent {\n\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  @ViewChild('columnContent', {read: ElementRef}) _columnContent: ElementRef;\n\n  get projectedWidth(): number {\n    if (this._columnContent && this._columnContent.nativeElement) {\n      return (<HTMLElement>this._columnContent.nativeElement).getBoundingClientRect().width;\n    }\n    return 100;\n  }\n\n  /**\n   * name?: string\n   * Sets unique column [name] for [sortable] events.\n   */\n  @Input('name') name: string = '';\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable') sortable: boolean = false;\n\n  /**\n   * active?: boolean\n   * Sets column to active state when 'true'.\n   * Defaults to 'false'\n   */\n  @Input('active') active: boolean = false;\n\n  /**\n   * numeric?: boolean\n   * Makes column follow the numeric data-table specs and sort icon.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of column.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                        new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  @HostBinding('class.mat-clickable')\n  get bindClickable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-sortable')\n  get bingSortable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-active')\n  get bindActive(): boolean {\n    return this.active;\n  }\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column');\n  }\n\n  /**\n   * Listening to click event on host to throw a sort event\n   */\n  @HostListener('click')\n  handleClick(): void {\n    if (this.sortable) {\n      this.onSortChange.emit({name: this.name, order: this._sortOrder});\n    }\n  }\n\n  isAscending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Ascending;\n  }\n\n  isDescending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Descending;\n  }\n\n}\n","import { Component, Input, Renderer2, ElementRef, HostBinding } from '@angular/core';\n\nexport type TdDataTableCellAlign = 'start' | 'center' | 'end';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'td[td-data-table-cell]',\n  styleUrls: ['./data-table-cell.component.scss' ],\n  templateUrl: './data-table-cell.component.html',\n})\nexport class TdDataTableCellComponent {\n\n  private _align: TdDataTableCellAlign;\n\n  /**\n   * numeric?: boolean\n   * Makes cell follow the numeric data-table specs.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  /**\n   * align?: 'start' | 'center' | 'end'\n   * Makes cell content align on demand\n   * Defaults to 'left', overrides numeric\n   */\n  @Input() \n  set align(align: TdDataTableCellAlign) {\n    this._align = align;\n  }\n  get align(): TdDataTableCellAlign {\n    return this._align;    \n  }\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-cell');\n  }\n\n}\n","import { Component, Renderer2, ElementRef } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'table[td-data-table]',\n  styleUrls: ['./data-table-table.component.scss' ],\n  templateUrl: './data-table-table.component.html',\n})\nexport class TdDataTableTableComponent {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table');\n  }\n\n}\n","import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\n\nimport { TdDataTableSortingOrder, ITdDataTableColumn } from '../data-table.component';\n\n@Injectable()\nexport class TdDataTableService {\n\n  /**\n   * params:\n   * - data: any[]\n   * - searchTerm: string\n   * - ignoreCase: boolean = false\n   * - excludedColumns: string[] = []\n   *\n   * Searches [data] parameter for [searchTerm] matches and returns a new array with them.\n   */\n  filterData(data: any[], searchTerm: string, ignoreCase: boolean = false, excludedColumns?: string[]): any[] {\n    let filter: string = searchTerm ? (ignoreCase ? searchTerm.toLowerCase() : searchTerm) : '';\n    if (filter) {\n      data = data.filter((item: any) => {\n        const res: any = Object.keys(item).find((key: string) => {\n          if (!excludedColumns || excludedColumns.indexOf(key) === -1) {\n            const preItemValue: string = ('' + item[key]);\n            const itemValue: string = ignoreCase ? preItemValue.toLowerCase() : preItemValue;\n            return itemValue.indexOf(filter) > -1;\n          }\n        });\n        return !(typeof res === 'undefined');\n      });\n    }\n    return data;\n  }\n\n  /**\n   * params:\n   * - data: any[]\n   * - sortBy: string\n   * - sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending\n   *\n   * Sorts [data] parameter by [sortBy] and [sortOrder] and returns the sorted data.\n   */\n  sortData(data: any[], sortBy: string, sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending): any[] {\n    if (sortBy) {\n      data = Array.from(data); // Change the array reference to trigger OnPush and not mutate original array\n      data.sort((a: any, b: any) => {\n        let compA: any = a[sortBy];\n        let compB: any = b[sortBy];\n        let direction: number = 0;\n        if (!Number.isNaN(Number.parseFloat(compA)) && !Number.isNaN(Number.parseFloat(compB))) {\n          direction = Number.parseFloat(compA) - Number.parseFloat(compB);\n        } else {\n          if (compA < compB) {\n            direction = -1;\n          } else if (compA > compB) {\n            direction = 1;\n          }\n        }\n        return direction * (sortOrder === TdDataTableSortingOrder.Descending ? -1 : 1);\n      });\n    }\n    return data;\n  }\n\n  /**\n   * params:\n   * - data: any[]\n   * - fromRow: number\n   * - toRow: : number\n   *\n   * Returns a section of the [data] parameter starting from [fromRow] and ending in [toRow].\n   */\n  pageData(data: any[], fromRow: number, toRow: number): any[] {\n    if (fromRow >= 1) {\n      data = data.slice(fromRow - 1, toRow);\n    }\n    return data;\n  }\n}\n\nexport function DATA_TABLE_PROVIDER_FACTORY(\n    parent: TdDataTableService): TdDataTableService {\n  return parent || new TdDataTableService();\n}\n\nexport const DATA_TABLE_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdDataTableService,\n  deps: [[new Optional(), new SkipSelf(), TdDataTableService]],\n  useFactory: DATA_TABLE_PROVIDER_FACTORY,\n};\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n\nimport { TdDataTableComponent } from './data-table.component';\nimport { TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableCellComponent } from './data-table-cell/data-table-cell.component';\nimport { TdDataTableRowComponent, TdDataTableColumnRowComponent } from './data-table-row/data-table-row.component';\nimport { TdDataTableTableComponent } from './data-table-table/data-table-table.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { DATA_TABLE_PROVIDER } from './services/data-table.service';\n\nconst TD_DATA_TABLE: Type<any>[] = [\n  TdDataTableComponent,\n  TdDataTableTemplateDirective,\n\n  TdDataTableColumnComponent,\n  TdDataTableCellComponent,\n  TdDataTableRowComponent,\n  TdDataTableColumnRowComponent,\n  TdDataTableTableComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCheckboxModule,\n    MatTooltipModule,\n    MatIconModule,\n    MatPseudoCheckboxModule,\n  ],\n  declarations: [\n    TD_DATA_TABLE,\n  ],\n  exports: [\n    TD_DATA_TABLE,\n  ],\n  providers: [\n    DATA_TABLE_PROVIDER,\n  ],\n})\nexport class CovalentDataTableModule {\n\n}\n"]}